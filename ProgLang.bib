%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Paolo Giosu√© Giarrusso at 2012-07-09 15:21:47 +0200 


%% Saved with string encoding Unicode (UTF-8) 


@string{acm = {ACM Press}}

@string{acmaddr = {New York}}

@string{acp4is = {Proc.\ AOSD Workshop on Aspects, Components, and Patterns for Infrastructure Software (ACP4IS)}}

@string{addisonwesleylongman = {Addison-Wesley}}

@string{aosd = {Proc.\ Int'l Conf.\ Aspect-Oriented Software Development (AOSD)}}

@string{apsec = {Proc.\ Asia-Pacific Software Engineering Conf.\ (APSEC)}}

@string{ase = {Proc.\ Int'l Conf.\ Automated Software Engineering (ASE)}}

@string{btw = {Proc.\ GI-Fachtagung Datenbanksysteme f{\"u}r Business, Technologie und Web (BTW)}}

@string{cacm = {Commun.\ ACM}}

@string{cambridge = {Cambridge University Press}}

@string{cc = {Proc.\ Int'l Conf.\ Compiler Construction (CC)}}

@string{ccpe = {Concurrency and Computation: Practice and Experience}}

@string{chi = {Proc.\ Conf.\ Human Factors in Computing Systems (CHI)}}

@string{cpe = {Concurrency: Practice and Experience}}

@string{csmr = {Proc.\ European Conf.\ on Software Maintenance and Reengineering (CSMR)}}

@string{csur = {ACM Computing Surveys (CSUR)}}

@string{diplomarbeit = {Master's Thesis ({Diplomarbeit})}}

@string{dsl = {Proc.\ Conf.\ Domain-specific Languages}}

@string{ecoop = {Proc.\ European Conf. Object-Oriented Programming (ECOOP)}}

@string{elsevier = {Elsevier}}

@string{elsevieraddr = {Amsterdam}}

@string{esecfse = {Proc.\ Europ.\ Software Engineering Conf./Foundations of Software Engineering (ESEC/FSE)}}

@string{etx = {Proc.\ OOPSLA Workshop on Eclipse Technology eXchange (ETX)}}

@string{etxe = {Proc.\ ECOOP Workshop on Eclipse Technology eXchange (ETX)}}

@string{eurosys = {Proc.\ European Conference on Computer Systems (EuroSys)}}

@string{fase = {Proc.\ Int'l Conf.\ Fundamental Approaches to Software Engineering}}

@string{fosd = {Proc.\ GPCE Workshop on Feature-Oriented Software Development (FOSD)}}

@string{fpca = {Proc.\ Int'l Conf.\ Functional Programming languages and Computer Architecture}}

@string{fse = {Proc.\ Int'l Symposium Foundations of Software Engineering (FSE)}}

@string{gcse = {Proc.\ Int'l Conf.\ Generative and Component-Based Software Engineering (GCSE)}}

@string{gi = {Gesellschaft f{\"u}r Informatik (GI)}}

@string{giaddr = {Bonn}}

@string{gpce = {Proc.\ Int'l Conf.\ Generative Programming and Component Engineering}}

@string{icdcs = {Proc.\ Int'l Conf.\ Distributed Computing Systems (ICDCS)}}

@string{icfp = {Proc.\ Int'l Conf.\ Functional Programming}}

@string{icmt = {Proc.\ Int'l Conf.\ Theory and Practice of Model Transformations (ICMT)}}

@string{icpc = {Proc.\ Int'l Conf.\ Program Comprehension (ICPC)}}

@string{icre = {Proc.\ Int'l Conf.\ Requirements Engineering (ICRE)}}

@string{icse = {Proc.\ Int'l Conf.\ Software Engineering (ICSE)}}

@string{icsecomp = {Comp.\ Int'l Conf.\ Software Engineering (ICSE)}}

@string{icsm = {Proc.\ Int'l Conf.\ Software Maintenance (ICSM)}}

@string{icsr = {Proc.\ Int'l Conf.\ Software Reuse (ICSR)}}

@string{ieee = {IEEE Computer Society}}

@string{ieeeaddr = {Los Alamitos, CA}}

@string{ieeeaddrp = {Piscataway, NJ}}

@string{ieeeaddrw = {Washington, DC}}

@string{ieeesoftware = {IEEE Software}}

@string{infcomput = {Information and Computation}}

@string{ipdps = {Proc. Int'l. Parallel and Distributed Processing Symp.}}

@string{iwpc = {Proc.\ Int'l Workshop on Program Comprehension (IWPC)}}

@string{jase = {Automated Software Engineering}}

@string{jfp = {Journal of Functional Programming}}

@string{jot = {Journal of Object Technology (JOT)}}

@string{kde = {IEEE Trans. Knowledge and Data Engineering}}

@string{ldta = {Proc.\ Workshop on Language Descriptions, Tools and Applications (LDTA)}}

@string{lfp = {Proc.\ ACM Conf.\ on LISP and Functional Programming}}

@string{lnbip = {Lecture Notes in Business Information Processing}}

@string{lncs = {LNCS}}

@string{lzi = {Leibniz-Zentrum f{\"u}r Informatik (LZI)}}

@string{lziaddr = {Wadern}}

@string{macs = {Proc.\ ICSE Workshop on Modeling and Analysis of Concerns in Software (MACS)}}

@string{mdtech = {School of Computer Science, University of Magdeburg}}

@string{models = {Proc.\ Int'l Conf.\ Model Driven Engineering Languages and Systems (MoDELS)}}

@string{netobjectdays = {Proc. Int'l Conf.\ Object-Oriented and Internet-based Technologies, Concepts, and Applications for a Networked World (Net.ObjectDays)}}

@string{newyork = {New York}}

@string{oopsla = {Proc.\ Int'l Conf.\ Object-Oriented Programming, Systems, Languages and Applications}}

@string{oopslacomp = {Companion Int'l Conf.\ Object-Oriented Programming, Systems, Languages and Applications}}

@string{patech = {Department of Informatics and Mathematics, University of Passau}}

@string{pepm = {Proc.\ Workshop on Partial Evaluation and Semantics-Based Program Manipulation}}

@string{pldi = {Proc.\ Conf.\ Programming Language Design and Implementation}}

@string{popl = {Proc.\ Symp.\ Principles of Programming Languages (POPL)}}

@string{re = {Proc.\ Int'l Requirements Engineering Conf. (RE)}}

@string{sac = {Proc.\ Symp.\ Applied Computing (SAC)}}

@string{sc = {Proc.\ Int'l Conf.\ Software Composition (SC)}}

@string{scam = {Proc.\ Int'l Workshop Source Code Analysis and Manipulation (SCAM)}}

@string{scp = {Sci. Comput. Program.}}

@string{setmdm = {Proc.\ EDBT Workshop on Software Engineering for Tailor-made Data Management}}

@string{sigmod = {Proc.\ Int'l SIGMOD Conf.\ on Management of Data}}

@string{sigplannot = {SIGPLAN Notices}}

@string{sigsoftnotice = {SIGSOFT Softw. Eng. Notes}}

@string{sle = {Proc.\ Conf.\ Software Language Engineering (SLE)}}

@string{spe = {Software: Practice and Experience}}

@string{splc = {Proc.\ Int'l Software Product Line Conference (SPLC)}}

@string{split = {Proc.\ SPLC Workshop on Software Product Line Testing (SPLiT)}}

@string{springer = {Springer-Verlag}}

@string{springeraddr = {Berlin/Heidelberg}}

@string{springeraddrbhn = {Berlin/Heidelberg/New York}}

@string{springeraddrl = {London}}

@string{springeraddrnj = {Secaucus, NJ}}

@string{springeraddrnl = {Dordrecht}}

@string{springeraddrny = {New York}}

@string{springernl = {Springer Netherlands}}

@string{tcs = {Theoretical Computer Science}}

@string{tocs = {ACM Trans. Comp. Syst. (TOCS)}}

@string{tods = {ACM Trans. Database Systems (TODS)}}

@string{tools = {Proc.\ Int'l Conf.\ Objects, Models, Components, Patterns (TOOLS EUROPE)}}

@string{toplas = {ACM Trans. Program. Lang. Syst. (TOPLAS)}}

@string{tosem = {ACM Trans. Softw. Eng. Methodol. (TOSEM)}}

@string{tpds = {IEEE Trans.\ Parallel Distr.\ Systems (TPDS)}}

@string{tse = {IEEE Trans.\ Softw.\ Eng. (TSE)}}

@string{vamos = {Proc.\ Int'l Workshop on Variability Modelling of Software-intensive Systems (VaMoS)}}

@string{visple = {Proc.\ SPLC Workshop on Visualization in Software Product Line Engineering (ViSPLE)}}

@string{wcre = {Proc.\ Working Conf.\ Reverse Engineering (WCRE)}}

@string{wgp = {Proc.\ SIGPLAN Workshop on Generic Programming}}

@string{wiley = {John Wiley \& Sons, Inc.}}

@string{wileyaddr = {New York, NY}}

@string{wrt = {Proc.\ ECOOP Workshop on Refactoring Tools (WRT)}}


@inproceedings{Yu08,
	Acmid = {1855742},
	Address = {Berkeley, CA, USA},
	Author = {Yu, Yuan and Isard, Michael and Fetterly, Dennis and Budiu, Mihai and Erlingsson, \'{U}lfar and Gunda, Pradeep Kumar and Currey, Jon},
	Booktitle = {Proceedings of the 8th USENIX conference on Operating systems design and implementation},
	Date-Added = {2012-07-09 15:17:25 +0200},
	Date-Modified = {2012-07-09 15:21:47 +0200},
	Location = {San Diego, California},
	Nourl = {http://dl.acm.org/citation.cfm?id=1855741.1855742},
	Numpages = {14},
	Pages = {1--14},
	Publisher = {USENIX Association},
	Series = {OSDI'08},
	Title = {{DryadLINQ}: a system for general-purpose distributed data-parallel computing using a high-level language},
	Year = {2008},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=1855741.1855742}}

@inproceedings{AOP,
	Address = SpringerAddr,
	Author = {Gregor Kiczales and John Lamping and Anurag Menhdhekar and Chris Maeda and Cristina Lopes and Jean-Marc Loingtier and John Irwin},
	Authorshort = {Gregor Kiczales and others},
	Booktitle = ECOOP,
	Date-Added = {2012-07-06 16:02:53 +0200},
	Date-Modified = {2012-07-09 15:20:52 +0200},
	Noeditor = {Mehmet Aksit and Satoshi Matsuoka},
	Noisbn = {3-540-63089-9},
	Nomonth = jul,
	Pages = {220--242},
	Publisher = Springer,
	Series = LNCS,
	Title = {Aspect-Oriented Programming},
	Volume = {1241},
	Year = 1997}

@incollection{Sorensen94,
	Abstract = {We study four transformation methodologies which are automatic instances of Burstall and Darlington's fold/unfold framework: partial evaluation, deforestation, supercompilation , and generalized partial computation (GPC) . One can classify these and other fold/unfold based transformers by how much information they maintain during transformation.},
	Affiliation = {University of Copenhagen DIKU, Department of Computer Science Universitetsparken 1 DK-2100 Copenhagen {\O} Denmark Universitetsparken 1 DK-2100 Copenhagen {\O} Denmark},
	Author = {S{\o}rensen, Morten and Gl{\"u}ck, Robert and Jones, Neil},
	Booktitle = {Programming Languages and Systems --- ESOP '94},
	Date-Added = {2012-07-03 14:58:26 +0200},
	Date-Modified = {2012-07-03 14:58:26 +0200},
	Editor = {Sannella, Donald},
	Isbn = {978-3-540-57880-2},
	Keyword = {Computer Science},
	Note = {10.1007/3-540-57880-3_32},
	Pages = {485-500},
	Publisher = {Springer Berlin / Heidelberg},
	Series = {Lecture Notes in Computer Science},
	Title = {Towards unifying partial evaluation, deforestation, supercompilation, and GPC},
	Url = {http://dx.doi.org/10.1007/3-540-57880-3_32},
	Volume = {788},
	Year = {1994},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/3-540-57880-3_32}}

@inproceedings{danvy99type-directed,
	Address = London,
	Author = {Danvy, Olivier},
	Booktitle = {Partial Evaluation - Practice and Theory, DIKU 1998 International Summer School},
	Date-Added = {2012-06-29 16:17:18 +0200},
	Date-Modified = {2012-06-29 16:17:18 +0200},
	Pages = {367--411},
	Publisher = Springer,
	Title = {Type-Directed Partial Evaluation},
	Url = {http://cs.au.dk/~danvy/tdpe-ln.pdf},
	Year = {1999},
	Bdsk-Url-1 = {http://cs.au.dk/~danvy/tdpe-ln.pdf}}

@inproceedings{Chapman10,
	Acmid = {1863547},
	Address = {New York, NY, USA},
	Author = {Chapman, James and Dagand, Pierre-\'{E}variste and McBride, Conor and Morris, Peter},
	Booktitle = {Proceedings of the 15th ACM SIGPLAN international conference on Functional programming},
	Date-Added = {2012-06-27 14:52:40 +0200},
	Date-Modified = {2012-06-27 14:52:45 +0200},
	Doi = {10.1145/1863543.1863547},
	Isbn = {978-1-60558-794-3},
	Keywords = {data structure, metaprogramming, monads, proof assistants, type systems},
	Location = {Baltimore, Maryland, USA},
	Numpages = {12},
	Pages = {3--14},
	Publisher = {ACM},
	Series = {ICFP '10},
	Title = {The gentle art of levitation},
	Url = {http://doi.acm.org/10.1145/1863543.1863547},
	Year = {2010},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1863543.1863547},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1863543.1863547}}

@inproceedings{Blelloch:2010:FPA:1863543.1863579,
	Acmid = {1863579},
	Address = {New York, NY, USA},
	Author = {Blelloch, Guy E.},
	Booktitle = {Proceedings of the 15th ACM SIGPLAN international conference on Functional programming},
	Date-Added = {2012-06-27 14:23:38 +0200},
	Date-Modified = {2012-06-27 14:23:38 +0200},
	Doi = {10.1145/1863543.1863579},
	Isbn = {978-1-60558-794-3},
	Keywords = {functional programming, parallel algorithms},
	Location = {Baltimore, Maryland, USA},
	Numpages = {1},
	Pages = {247--247},
	Publisher = {ACM},
	Series = {ICFP '10},
	Title = {Functional parallel algorithms},
	Url = {http://doi.acm.org/10.1145/1863543.1863579},
	Year = {2010},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1863543.1863579},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1863543.1863579}}

@inproceedings{Blelloch96a,
	Acmid = {232650},
	Address = {New York, NY, USA},
	Author = {Blelloch, Guy E. and Greiner, John},
	Booktitle = {Proceedings of the first ACM SIGPLAN international conference on Functional programming},
	Date-Added = {2012-06-23 14:32:17 +0200},
	Date-Modified = {2012-06-23 14:32:20 +0200},
	Doi = {10.1145/232627.232650},
	Isbn = {0-89791-770-7},
	Location = {Philadelphia, Pennsylvania, United States},
	Numpages = {13},
	Pages = {213--225},
	Publisher = {ACM},
	Series = {ICFP '96},
	Title = {A provable time and space efficient implementation of NESL},
	Url = {http://doi.acm.org/10.1145/232627.232650},
	Year = {1996},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/232627.232650},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/232627.232650}}

@incollection{Chakravarty01Nepal,
	Abstract = {This paper discusses an extension of Haskell by support for nested data-parallel programming in the style of the special-purpose language Nesl . The extension consists of a parallel array type, array comprehensions, and primitive parallel array operations. This extension brings a hitherto unsupported style of parallel programming to Haskell. Moreover, nested data parallelism should receive wider attention when available in a standardised language like Haskell.},
	Affiliation = {University of New South Wales Australia},
	Author = {Chakravarty, Manuel and Keller, Gabriele and Lechtchinsky, Roman and Pfannenstiel, Wolf},
	Booktitle = {Euro-Par 2001 Parallel Processing},
	Date-Added = {2012-06-23 14:19:28 +0200},
	Date-Modified = {2012-06-23 14:20:04 +0200},
	Editor = {Sakellariou, Rizos and Gurd, John and Freeman, Len and Keane, John},
	Isbn = {978-3-540-42495-6},
	Keyword = {Computer Science},
	Keywords = {nested data parallelism, Haskell},
	Note = {10.1007/3-540-44681-8_76},
	Pages = {524-534},
	Publisher = {Springer Berlin / Heidelberg},
	Series = {Lecture Notes in Computer Science},
	Title = {Nepal --- Nested Data Parallelism in Haskell},
	Url = {http://dx.doi.org/10.1007/3-540-44681-8_76},
	Volume = {2150},
	Year = {2001},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/3-540-44681-8_76}}

@article{Blelloch90,
	Abstract = {This paper introduces techniques for compiling the nested parallelism of collection-oriented languages onto existing parallel hardware. Programmers of parallel machines encounter nested parallelism whenever they write a routine that performs parallel operations, and then want to call that routine itself in parallel. This occurs naturally in many applications. Most parallel systems, however, do not permit the expression of nested parallelism. This forces the programmer to exploit only one level of parallelism or to implement nested parallelism themselves. Both of these alternatives tend to produce code that is harder to maintain and less modular than code described at a higher level with nested parallel constructs. Not permitting the expression of nested parallelism is analogous to not permitting nested loops in serial languages. This paper describes issues and techniques for taking high-level descriptions of parallelism in the form of operations on nested collections and automatically translating them into flat, single-level parallelism. A compiler that translates a subset of a collection-oriented language,Paralation Lisp, into the instruction set of a flat virtual machine is presented. The instructions of the virtual machine are simple instructions on vectors of atomic values, and can be implemented on a broad class of target architectures, including vector machines, single-instruction parallel machines, and multiple-instruction parallel machines. We have implemented the instructions on the Connection Machine computer (CM-2), a massively parallel, single-instruction computer. As an illustration of the compiler techniques, the paper presents a quicksort example. The example has been tested on the CM-2. The speed of the compiled sort is only a factor of 3 slower than that of the fastest CM-2 sort.},
	Author = {Guy E. Blelloch and Gary W. Sabot},
	Date-Added = {2012-06-23 14:14:27 +0200},
	Date-Modified = {2012-06-23 14:21:33 +0200},
	Doi = {10.1016/0743-7315(90)90087-6},
	Issn = {0743-7315},
	Journal = {Journal of Parallel and Distributed Computing},
	Keywords = {nested data parallelism; parallel programming},
	Number = {2},
	Pages = {119 - 134},
	Title = {Compiling collection-oriented languages onto massively parallel computers},
	Url = {http://www.sciencedirect.com/science/article/pii/0743731590900876},
	Volume = {8},
	Year = {1990},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/0743731590900876},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/0743-7315(90)90087-6}}

@inproceedings{Kienzle06AopMakesSense,
	Author = {Kienzle, J{\"o}rg and Guerraoui, Rachid},
	Booktitle = {ECOOP 2002 --- Object-Oriented Programming},
	Date-Added = {2012-06-23 14:13:25 +0200},
	Date-Modified = {2012-06-23 14:13:25 +0200},
	Editor = {Magnusson, Boris},
	Pages = {113-121},
	Publisher = {Springer Berlin / Heidelberg},
	Series = {Lecture Notes in Computer Science},
	Title = {AOP: Does It Make Sense? The Case of Concurrency and Failures},
	Url = {http://dx.doi.org/10.1007/3-540-47993-7_2},
	Volume = {2374},
	Year = {2006},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/3-540-47993-7_2}}

@article{Blelloch96,
	Acmid = {227246},
	Address = {New York, NY, USA},
	Author = {Blelloch, Guy E.},
	Date-Added = {2012-06-22 07:08:26 +0200},
	Date-Modified = {2012-06-23 14:21:33 +0200},
	Doi = {10.1145/227234.227246},
	Issn = {0001-0782},
	Issue_Date = {March 1996},
	Journal = {Commun. ACM},
	Keywords = {nested data parallelism; parallel programming},
	Month = mar,
	Number = {3},
	Numpages = {13},
	Pages = {85--97},
	Publisher = {ACM},
	Title = {Programming parallel algorithms},
	Url = {http://doi.acm.org/10.1145/227234.227246},
	Volume = {39},
	Year = {1996},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/227234.227246},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/227234.227246}}

@incollection{Keller96FlatteningNesl,
	Affiliation = {Technische Universit{\"a}t Berlin Forschungsgruppe Softwaretechnik (FR5-6) Franklinstr. 28/29 D-10587 Berlin Franklinstr. 28/29 D-10587 Berlin},
	Author = {Keller, Gabriele and Simons, Martin},
	Booktitle = {Concurrency and Parallelism, Programming, Networking, and Security},
	Date-Added = {2012-06-22 06:56:59 +0200},
	Date-Modified = {2012-06-23 14:24:26 +0200},
	Editor = {Jaffar, Joxan and Yap, Roland},
	Isbn = {978-3-540-62031-0},
	Keyword = {Computer Science},
	Keywords = {nested data parallelism},
	Note = {10.1007/BFb0027796},
	Pages = {234-243},
	Publisher = {Springer Berlin / Heidelberg},
	Series = {Lecture Notes in Computer Science},
	Title = {A calculational approach to flattening nested data parallelism in functional languages},
	Url = {http://dx.doi.org/10.1007/BFb0027796},
	Volume = {1179},
	Year = {1996},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/BFb0027796}}

@inproceedings{Odersky01coloredLocal,
	Author = {Martin Odersky and Matthias Zenger and Christoph Zenger},
	Booktitle = {Proc. ACM Symposium on Principles of Programming Languages},
	Date-Added = {2012-04-20 17:27:39 +0200},
	Date-Modified = {2012-04-20 17:28:07 +0200},
	Pages = {41-53},
	Title = {Colored Local Type Inference},
	Year = 2001}

@inproceedings{hofer08polymorphic,
	Author = {Christian Hofer and Klaus Ostermann and Tillmann Rendel and Adriaan Moors},
	Booktitle = gpce,
	Date-Added = {2012-04-14 09:25:19 +0200},
	Date-Modified = {2012-06-23 14:26:16 +0200},
	Keywords = {DSEL},
	Nourl = {http://www.daimi.au.dk/~ko/papers/gpce50_hofer.pdf},
	Publisher = {ACM},
	Series = {GPCE'08},
	Title = {Polymorphic Embedding of {DSLs}},
	Year = {2008},
	Bdsk-Url-1 = {http://www.daimi.au.dk/~ko/papers/gpce50_hofer.pdf}}

@book{Pierce02TAPL,
	Abstract = {{A type system is a syntactic method for automatically checking the absence of certain erroneous behaviors by classifying program phrases according to the kinds of values they compute. The study of type systems--and of programming languages from a type-theoretic perspective-has important applications in software engineering, language design, high-performance compilers, and security.<br /> <br /> This text provides a comprehensive introduction both to type systems in computer science and to the basic theory of programming languages. The approach is pragmatic and operational; each new concept is motivated by programming examples and the more theoretical sections are driven by the needs of implementations. Each chapter is accompanied by numerous exercises and solutions, as well as a running implementation, available via the Web. Dependencies between chapters are explicitly identified, allowing readers to choose a variety of paths through the material.<br /> <br /> The core topics include the untyped lambda-calculus, simple type systems, type reconstruction, universal and existential polymorphism, subtyping, bounded quantification, recursive types, kinds, and type operators. Extended case studies develop a variety of approaches to modeling the features of object-oriented languages.}},
	Author = {Pierce, Benjamin C.},
	Citeulike-Article-Id = {105547},
	Citeulike-Linkout-0 = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20&amp;path=ASIN/0262162091},
	Citeulike-Linkout-1 = {http://www.amazon.de/exec/obidos/redirect?tag=citeulike01-21&amp;path=ASIN/0262162091},
	Citeulike-Linkout-2 = {http://www.amazon.fr/exec/obidos/redirect?tag=citeulike06-21&amp;path=ASIN/0262162091},
	Citeulike-Linkout-3 = {http://www.amazon.jp/exec/obidos/ASIN/0262162091},
	Citeulike-Linkout-4 = {http://www.amazon.co.uk/exec/obidos/ASIN/0262162091/citeulike00-21},
	Citeulike-Linkout-5 = {http://www.amazon.com/exec/obidos/redirect?tag=citeulike07-20&path=ASIN/0262162091},
	Citeulike-Linkout-6 = {http://www.worldcat.org/isbn/0262162091},
	Citeulike-Linkout-7 = {http://books.google.com/books?vid=ISBN0262162091},
	Citeulike-Linkout-8 = {http://www.amazon.com/gp/search?keywords=0262162091&index=books&linkCode=qs},
	Citeulike-Linkout-9 = {http://www.librarything.com/isbn/0262162091},
	Date-Added = {2012-04-14 05:21:23 +0200},
	Date-Modified = {2012-04-14 05:24:09 +0200},
	Day = {01},
	Edition = {1st},
	Howpublished = {Hardcover},
	Keywords = {getting-started, type-theory},
	Noisbn = {0262162091},
	Nomonth = feb,
	Posted-At = {2008-02-26 22:26:29},
	Priority = {0},
	Publisher = {The MIT Press},
	Title = {{Types and Programming Languages}},
	Year = {2002},
	Bdsk-Url-1 = {http://www.worldcat.org/isbn/0262162091}}

@article{carette09finally,
	Author = {Carette, Jacques and Kiselyov, Oleg and Shan, Chung-chieh},
	Date-Added = {2012-04-14 00:18:13 +0200},
	Date-Modified = {2012-06-23 14:23:18 +0200},
	Issue = {5},
	Journal = JFP,
	Keywords = {DSEL},
	Month = {September},
	Noaddress = NewYork,
	Nopublisher = Cambridge,
	Pages = {509--543},
	Title = {Finally Tagless, Partially Evaluated: Tagless Staged Interpreters for Simpler Typed Languages},
	Volume = {19},
	Year = {2009},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?id=1630623.1630626}}

@inproceedings{Jones01playingby,
	Author = {Simon Peyton Jones and Andrew Tolmach and Tony Hoare},
	Booktitle = {Proc. Haskell Workshop},
	Date-Added = {2012-04-13 12:22:53 +0200},
	Date-Modified = {2012-06-23 14:28:03 +0200},
	Editor = {Ralf Hinze},
	Keywords = {optimization},
	Pages = {203-233},
	Title = {Playing by the rules: rewriting as a practical optimisation technique in {GHC}},
	Year = {2001}}

@inproceedings{Gill93shortcut,
	Acmid = {165214},
	Address = {New York, NY, USA},
	Author = {Gill, Andrew and Launchbury, John and Peyton Jones, Simon L.},
	Booktitle = fpca,
	Date-Added = {2012-04-11 23:10:44 +0200},
	Date-Modified = {2012-06-23 14:26:52 +0200},
	Keywords = {optimization},
	Location = {Copenhagen, Denmark},
	Nodoi = {10.1145/165180.165214},
	Noisbn = {0-89791-595-X},
	Nourl = {http://doi.acm.org/10.1145/165180.165214},
	Numpages = {10},
	Pages = {223--232},
	Publisher = {ACM},
	Series = {FPCA '93},
	Title = {A short cut to deforestation},
	Year = {1993},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/165180.165214},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/165180.165214}}

@article{Wadler90deforest,
	Address = elsevieraddr,
	Author = {Wadler, Philip},
	Date-Added = {2012-04-11 23:06:54 +0200},
	Date-Modified = {2012-06-23 14:26:52 +0200},
	Issue_Date = {June 22, 1990},
	Journal = tcs,
	Keywords = {optimization},
	Nodoi = {10.1016/0304-3975(90)90147-A},
	Noissn = {0304-3975},
	Nomonth = jun,
	Nourl = {http://dx.doi.org/10.1016/0304-3975(90)90147-A},
	Number = {2},
	Numpages = {18},
	Pages = {231--248},
	Publisher = elsevier,
	Title = {Deforestation: transforming programs to eliminate trees},
	Volume = {73},
	Year = {1990},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/0304-3975(90)90147-A}}

@inproceedings{Coutts07stream,
	Acmid = {1291199},
	Address = {New York, NY, USA},
	Author = {Coutts, Duncan and Leshchinskiy, Roman and Stewart, Don},
	Booktitle = icfp,
	Date-Added = {2012-04-11 23:01:07 +0200},
	Date-Modified = {2012-06-23 14:26:52 +0200},
	Keywords = {deforestation, functional programming, program fusion, program transformation; optimization},
	Location = {Freiburg, Germany},
	Nodoi = {10.1145/1291151.1291199},
	Noisbn = {978-1-59593-815-2},
	Nourl = {http://doi.acm.org/10.1145/1291151.1291199},
	Numpages = {12},
	Pages = {315--326},
	Publisher = {ACM},
	Series = {ICFP '07},
	Title = {Stream fusion: from lists to streams to nothing at all},
	Year = {2007},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1291151.1291199},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1291151.1291199}}

@inproceedings{mitchell10rethinking,
	Acmid = {1863588},
	Address = {New York, NY, USA},
	Author = {Mitchell, Neil},
	Booktitle = icfp,
	Date-Added = {2012-04-11 14:40:35 +0200},
	Date-Modified = {2012-06-23 14:26:52 +0200},
	Keywords = {haskell, optimization, supercompilation},
	Location = {Baltimore, Maryland, USA},
	Nodoi = {http://doi.acm.org/10.1145/1863543.1863588},
	Noisbn = {978-1-60558-794-3},
	Nourl = {http://doi.acm.org/10.1145/1863543.1863588},
	Numpages = {12},
	Pages = {309--320},
	Prg = {2011-02-09, Paolo},
	Publisher = {ACM},
	Series = {ICFP '10},
	Title = {Rethinking Supercompilation},
	Year = {2010},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1863543.1863588}}

@misc{OderskyPimpLib,
	Author = {Martin Odersky},
	Date-Added = {2012-04-10 19:04:50 +0200},
	Date-Modified = {2012-04-10 19:14:33 +0200},
	Note = {Last accessed on 10 April 2012},
	Title = {Pimp my Library},
	Url = {http://www.artima.com/weblogs/viewpost.jsp?thread=179766},
	Urldate = {9 October, 2006},
	Year = {2006},
	Bdsk-Url-1 = {http://www.artima.com/weblogs/viewpost.jsp?thread=179766}}

@article{Steele99Growing,
	Author = {Steele, Guy L.},
	Date-Added = {2012-04-03 07:32:20 +0200},
	Date-Modified = {2012-06-23 14:23:39 +0200},
	Issue = {3},
	Journal = {Higher-Order and Symbolic Computation},
	Keyword = {Computer Science},
	Keywords = {DSEL},
	Noissn = {1388-3690},
	Nonote = {10.1023/A:1010085415024},
	Nourl = {http://dx.doi.org/10.1023/A:1010085415024},
	Pages = {221-236},
	Publisher = {Springer Netherlands},
	Title = {Growing a Language},
	Volume = {12},
	Year = {1999},
	Bdsk-Url-1 = {http://dx.doi.org/10.1023/A:1010085415024}}

@inproceedings{Pfenning88,
	Acmid = {62697},
	Address = {New York, NY, USA},
	Author = {Pfenning, Frank},
	Booktitle = lfp,
	Date-Added = {2012-04-03 07:23:20 +0200},
	Date-Modified = {2012-04-03 07:23:23 +0200},
	Location = {Snowbird, Utah, United States},
	Nodoi = {10.1145/62678.62697},
	Noisbn = {0-89791-273-X},
	Nourl = {http://doi.acm.org/10.1145/62678.62697},
	Numpages = {11},
	Pages = {153--163},
	Publisher = {ACM},
	Series = {LFP '88},
	Title = {Partial polymorphic type inference and higher-order unification},
	Year = {1988},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/62678.62697},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/62678.62697}}

@incollection{Filinski01NormByEval,
	Abstract = {We show how a simple semantic characterization of normalization by evaluation for the Œª Œ≤Œ∑ -calculus can be extended to a similar construction for normalization of terms in the computational Œª-calculus. Specifically, we show that a suitable residualizing interpretation of base types, constants, and computational effects allows us to extract a syntactic normal form from a term's denotation. The required interpretation can itself be constructed as the meaning of a suitable functional program in an ML-like language, leading directly to a practical normalization algorithm. The results extend easily to product and sum types, and can be seen as a formal basis for call-by-value type-directed partial evaluation.},
	Affiliation = {University of Aarhus BRICS, Department of Computer Science Aarhus},
	Author = {Filinski, Andrzej},
	Booktitle = {Typed Lambda Calculi and Applications},
	Date-Added = {2012-04-01 23:07:33 +0200},
	Date-Modified = {2012-04-01 23:08:32 +0200},
	Editor = {Abramsky, Samson},
	Keyword = {Computer Science},
	Noisbn = {978-3-540-41960-0},
	Nonote = {10.1007/3-540-45413-6\_15},
	Nourl = {http://dx.doi.org/10.1007/3-540-45413-6_15},
	Pages = {151-165},
	Publisher = {Springer Berlin / Heidelberg},
	Series = {Lecture Notes in Computer Science},
	Title = {Normalization by Evaluation for the Computational Lambda-Calculus},
	Volume = {2044},
	Year = {2001},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/3-540-45413-6_15}}

@inproceedings{Berger91NormByEval,
	Abstract = {A functional p rarr;e (procedure rarr;expression) that inverts the evaluation functional for typed lambda;-terms in any model of typed lambda;-calculus containing some basic arithmetic is defined. Combined with the evaluation functional, p rarr;e yields an efficient normalization algorithm. The method is extended to lambda;-calculi with constants and is used to normalize (the lambda;-representations of) natural deduction proofs of (higher order) arithmetic. A consequence of theoretical interest is a strong completeness theorem for beta; eta;-reduction. If two lambda;-terms have the same value in some model containing representations of the primitive recursive functions (of level 1) then they are probably equal in the beta; eta;-calculus },
	Author = {Berger, U. and Schwichtenberg, H.},
	Booktitle = {Proc. Symposium on Logic in Computer Science, 1991. LICS '91., Proceedings of Sixth Annual IEEE Symposium on},
	Date-Added = {2012-03-29 13:04:39 +0200},
	Date-Modified = {2012-06-23 14:20:23 +0200},
	Keywords = {lambda-calculi;completeness theorem;constants;evaluation functional;inverse;natural deduction proofs;normalization algorithm;recursive functions;typed lambda-calculus;typed lambda-terms;formal logic;},
	Month = {july},
	Nodoi = {10.1109/LICS.1991.151645},
	Pages = {203 -211},
	Series = {LICS '91},
	Title = {An inverse of the evaluation functional for typed $\lambda$-calculus},
	Year = {1991},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/LICS.1991.151645}}

@incollection{Berger98NormByEval,
	Abstract = {We extend normalization by evaluation (first presented in [ 4 ]) from the pure typed Œª-calculus to general higher type term rewrite systems. This work also gives a theoretical explanation of the normalization algorithm implemented in the Minlog system},
	Affiliation = {Mathematisches Institut der Universit{\"a}t M{\"u}nchen Germany},
	Author = {Berger, Ulrich and Eberl, Matthias and Schwichtenberg, Helmut},
	Booktitle = {Prospects for Hardware Foundations},
	Date-Added = {2012-03-29 09:52:55 +0200},
	Date-Modified = {2012-03-29 09:53:26 +0200},
	Editor = {M{\"o}ller, Bernhard and Tucker, John},
	Keyword = {Computer Science},
	Noisbn = {978-3-540-65461-2},
	Nonote = {10.1007/3-540-49254-2\_4},
	Nourl = {http://dx.doi.org/10.1007/3-540-49254-2_4},
	Pages = {624-624},
	Publisher = {Springer Berlin / Heidelberg},
	Series = {Lecture Notes in Computer Science},
	Title = {Normalization by Evaluation},
	Volume = {1546},
	Year = {1998},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/3-540-49254-2_4}}

@inproceedings{Rompf11BBlocks,
	Author = {Rompf, Tiark and Sujeeth, Arvind K. and Lee, HyoukJoong and Brown, Kevin J. and Chafi, Hassan and Odersky, Martin and Olukotun, Kunle},
	Booktitle = dsl,
	Date-Added = {2012-03-28 15:11:14 +0200},
	Date-Modified = {2012-06-23 14:28:22 +0200},
	Doi = {10.4204/EPTCS.66.5},
	Editor = {Danvy, Olivier and Shan, Chung-chieh},
	Keywords = {DSEL; optimization; multi-stage programming},
	Nonote = {Leave the DOI in place here, because this paper is actually hard to find!},
	Pages = {93-117},
	Publisher = {Open Publishing Association},
	Series = {Electronic Proceedings in Theoretical Computer Science},
	Title = {Building-Blocks for Performance Oriented {DSLs}},
	Volume = {66},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.4204/EPTCS.66.5}}

@incollection{Emir07Patterns,
	Abstract = {Data in object-oriented programming is organized in a hierarchy of classes. The problem of object-oriented pattern matching is how to explore this hierarchy from the outside. This usually involves classifying objects by their run-time type, accessing their members, or determining some other characteristic of a group of objects. In this paper we compare six different pattern matching techniques: object-oriented decomposition, visitors, type-tests/type-casts, typecase, case classes, and extractors. The techniques are compared on nine criteria related to conciseness, maintainability and performance. The paper introduces case classes and extractors as two new pattern-matching methods and shows that their combination works well for all of the established criteria.},
	Affiliation = {EPFL, 1015 Lausanne Switzerland},
	Author = {Emir, Burak and Odersky, Martin and Williams, John},
	Booktitle = ecoop,
	Date-Added = {2012-03-27 11:24:20 +0200},
	Date-Modified = {2012-03-27 11:25:17 +0200},
	Editor = {Ernst, Erik},
	Keyword = {Computer Science},
	Noisbn = {978-3-540-73588-5},
	Nonote = {10.1007/978-3-540-73589-2\_14},
	Nourl = {http://dx.doi.org/10.1007/978-3-540-73589-2_14},
	Pages = {273-298},
	Publisher = {Springer Berlin / Heidelberg},
	Read = {1},
	Series = {Lecture Notes in Computer Science},
	Title = {Matching Objects with Patterns},
	Volume = {4609},
	Year = {2007},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-540-73589-2_14}}

@incollection{Hajiyev06CodeQuest,
	Abstract = {Source code querying tools allow programmers to explore relations between different parts of the code base. This paper describes such a tool, named codeQuest. It combines two previous proposals, namely the use of logic programming and database systems. As the query language we use safe Datalog , which was originally introduced in the theory of databases. That provides just the right level of expressiveness; in particular recursion is indispensable for source code queries. Safe Datalog is like Prolog, but all queries are guaranteed to terminate, and there is no need for extra-logical annotations. Our implementation of Datalog maps queries to a relational database system. We are thus able to capitalise on the query optimiser provided by such a system. For recursive queries we implement our own optimisations in the translation from Datalog to SQL. Experiments confirm that this strategy yields an efficient, scalable code querying system.},
	Affiliation = {Programming Tools Group, Oxford University Computing Laboratory, Wolfson Building, Parks Road, Oxford, OX1 3QD UK},
	Author = {Hajiyev, Elnar and Verbaere, Mathieu and de Moor, Oege},
	Booktitle = ecoop,
	Date-Added = {2012-03-26 20:20:46 +0200},
	Date-Modified = {2012-06-23 14:25:50 +0200},
	Editor = {Thomas, Dave},
	Keyword = {Computer Science},
	Keywords = {query constructs},
	Noisbn = {978-3-540-35726-1},
	Nonote = {10.1007/11785477\_2},
	Nourl = {http://dx.doi.org/10.1007/11785477_2},
	Pages = {2-27},
	Publisher = {Springer Berlin / Heidelberg},
	Series = {Lecture Notes in Computer Science},
	Title = {\emph{CodeQuest}: Scalable Source Code Queries with {Datalog}},
	Volume = {4067},
	Year = {2006},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/11785477_2}}

@inproceedings{Chafi10LangVirt,
	Acmid = {1869527},
	Address = {New York, NY, USA},
	Author = {Chafi, Hassan and DeVito, Zach and Moors, Adriaan and Rompf, Tiark and Sujeeth, Arvind K. and Hanrahan, Pat and Odersky, Martin and Olukotun, Kunle},
	Booktitle = oopslacomp,
	Date-Added = {2012-03-26 02:48:39 +0200},
	Date-Modified = {2012-03-30 21:34:13 +0200},
	Keywords = {domain specific languages, dynamic optimizations, parallel programming},
	Location = {Reno/Tahoe, Nevada, USA},
	Nodoi = {10.1145/1869459.1869527},
	Noisbn = {978-1-4503-0203-6},
	Nourl = {http://doi.acm.org/10.1145/1869459.1869527},
	Numpages = {13},
	Pages = {835--847},
	Publisher = {ACM},
	Series = {OOPSLA '10},
	Title = {Language virtualization for heterogeneous parallel computing},
	Year = {2010},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1869459.1869527},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1869459.1869527}}

@misc{Moors10TCP,
	Author = {Adriaan Moors},
	Date-Added = {2012-03-25 21:10:39 +0200},
	Date-Modified = {2012-04-11 22:19:53 +0200},
	Note = {Last accessed on 2012-04-11},
	Title = {Type Constructor Polymorphism},
	Url = {http://adriaanm.github.com/research/2010/10/06/new-in-scala-2.8-type-constructor-inference/},
	Year = {2010},
	Bdsk-Url-1 = {http://adriaanm.github.com/research/2010/10/06/new-in-scala-2.8-type-constructor-inference/}}

@misc{ScalaRef,
	Author = {Martin Odersky},
	Date-Added = {2012-03-24 03:02:58 +0100},
	Date-Modified = {2012-03-25 21:16:03 +0200},
	Month = {August},
	Read = {1},
	Title = {The {Scala} Language Specification Version 2.9},
	Year = {2011}}

@inproceedings{Siek10gplml,
	Acmid = {1706358},
	Address = {New York, NY, USA},
	Author = {Siek, Jeremy G.},
	Booktitle = pepm,
	Date-Added = {2012-03-21 17:12:35 +0100},
	Date-Modified = {2012-03-21 17:12:53 +0100},
	Keywords = {domain-specific embedded languages, metaprogramming, multi-stage programming, reflection},
	Location = {Madrid, Spain},
	Nodoi = {10.1145/1706356.1706358},
	Noisbn = {978-1-60558-727-1},
	Nourl = {http://doi.acm.org/10.1145/1706356.1706358},
	Numpages = {2},
	Pages = {3},
	Publisher = {ACM},
	Series = {PEPM '10},
	Title = {General purpose languages should be metalanguages},
	Year = {2010},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1706356.1706358},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1706356.1706358}}

@inproceedings{Pfenning88hoas,
	Acmid = {54010},
	Address = {New York, NY, USA},
	Author = {Pfenning, F. and Elliot, C.},
	Booktitle = pldi,
	Date-Added = {2012-03-21 11:56:39 +0100},
	Date-Modified = {2012-03-21 17:35:06 +0100},
	Location = {Atlanta, Georgia, United States},
	Nodoi = {10.1145/53990.54010},
	Noisbn = {0-89791-269-1},
	Nourl = {http://doi.acm.org/10.1145/53990.54010},
	Numpages = {10},
	Pages = {199--208},
	Publisher = {ACM},
	Series = {PLDI '88},
	Title = {Higher-order abstract syntax},
	Year = {1988},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/53990.54010},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/53990.54010}}

@inproceedings{Oliveira10TCOI,
	Acmid = {1869489},
	Address = {New York, NY, USA},
	Author = {Oliveira, Bruno C.d.S. and Moors, Adriaan and Odersky, Martin},
	Booktitle = oopsla,
	Date-Added = {2012-03-20 15:42:48 +0100},
	Date-Modified = {2012-03-20 15:43:20 +0100},
	Keywords = {abstract datatypes, c++ concepts, scala, type classes},
	Location = {Reno/Tahoe, Nevada, USA},
	Nodoi = {10.1145/1869459.1869489},
	Noisbn = {978-1-4503-0203-6},
	Nourl = {http://doi.acm.org/10.1145/1869459.1869489},
	Numpages = {20},
	Pages = {341--360},
	Publisher = {ACM},
	Series = {OOPSLA '10},
	Title = {Type classes as objects and implicits},
	Year = {2010},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1869459.1869489},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1869459.1869489}}

@inproceedings{Moors12Virtualized,
	Acmid = {2103769},
	Address = {New York, NY, USA},
	Author = {Moors, Adriaan and Rompf, Tiark and Haller, Philipp and Odersky, Martin},
	Booktitle = {Proc.\ Workshop on Partial Evaluation and Semantics-Based Program Manipulation},
	Date-Added = {2012-03-20 14:54:14 +0100},
	Date-Modified = {2012-03-20 14:55:07 +0100},
	Keywords = {code generation, domain-specific languages, language virtualization, multi-stage programming},
	Location = {Philadelphia, Pennsylvania, USA},
	Nodoi = {10.1145/2103746.2103769},
	Noisbn = {978-1-4503-1118-2},
	Nourl = {http://doi.acm.org/10.1145/2103746.2103769},
	Numpages = {4},
	Pages = {117--120},
	Publisher = {ACM},
	Series = {PEPM '12},
	Title = {Scala-virtualized},
	Year = {2012},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2103746.2103769},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2103746.2103769}}

@book{Odersky11book,
	Author = {Odersky, Martin and Spoon, Lex and Venners, Bill},
	Date-Added = {2012-03-20 09:36:00 +0100},
	Date-Modified = {2012-03-20 10:02:24 +0100},
	Edition = {2},
	Howpublished = {Paperback},
	Keywords = {Scala},
	Month = jan,
	Noisbn = {0981531644},
	Nourl = {http://www.worldcat.org/isbn/0981531644},
	Publisher = {Artima Inc},
	Title = {{Programming in Scala}},
	Year = {2011},
	Bdsk-Url-1 = {http://www.worldcat.org/isbn/0981531644}}

@inproceedings{ErdwegGR12,
	Author = {Sebastian Erdweg and Paolo G. Giarrusso and Tillmann Rendel},
	Booktitle = LDTA,
	Date-Added = {2012-03-17 12:27:47 +0100},
	Date-Modified = {2012-06-23 14:23:29 +0200},
	Keywords = {DSEL},
	Note = {To appear},
	Pdf = {http://www.informatik.uni-marburg.de/~seba/publications/languagecomposition.pdf},
	Title = {Language Composition Untangled},
	Year = {2012}}

@inproceedings{Rothamel08generating,
	Acmid = {1449923},
	Address = {New York, NY, USA},
	Author = {Rothamel, Tom and Liu, Yanhong A.},
	Booktitle = gpce,
	Date-Added = {2012-03-17 12:22:17 +0100},
	Date-Modified = {2012-06-23 14:26:52 +0200},
	Keywords = {automatic incrementalization, optimization, query constructs},
	Location = {Nashville, TN, USA},
	Nodoi = {10.1145/1449913.1449923},
	Noisbn = {978-1-60558-267-2},
	Nourl = {http://doi.acm.org/10.1145/1449913.1449923},
	Numpages = {12},
	Pages = {55--66},
	Publisher = {ACM},
	Series = {GPCE '08},
	Title = {Generating incremental implementations of object-set queries},
	Year = {2008},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1449913.1449923},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1449913.1449923}}

@inproceedings{rompf2010lightweight,
	Acmid = {1868314},
	Address = {New York, NY, USA},
	Author = {Rompf, Tiark and Odersky, Martin},
	Booktitle = gpce,
	Conference = {GPCE},
	Date-Added = {2012-03-17 11:20:08 +0100},
	Date-Modified = {2012-03-19 02:20:36 +0100},
	Keywords = {code generation, domain-specific languages, language virtualization, multi-stage programming},
	Location = {Eindhoven, The Netherlands},
	Nodoi = {http://doi.acm.org/10.1145/1868294.1868314},
	Noisbn = {978-1-4503-0154-1},
	Nourl = {http://doi.acm.org/10.1145/1868294.1868314},
	Numpages = {10},
	Pages = {127--136},
	Prg = {2011-01-26, Sebastian},
	Publisher = {ACM},
	Series = {GPCE '10},
	Title = {Lightweight modular staging: a pragmatic approach to runtime code generation and compiled {DSLs}},
	Year = {2010},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1868294.1868314}}

@article{Eini11Pain,
	Acmid = {1978556},
	Address = {New York, NY, USA},
	Author = {Eini, Oren},
	Date-Added = {2012-03-16 17:33:47 +0100},
	Date-Modified = {2012-06-23 14:27:21 +0200},
	Issue_Date = {August 2011},
	Journal = cacm,
	Keywords = {LINQ},
	Month = aug,
	Nodoi = {10.1145/1978542.1978556},
	Noissn = {0001-0782},
	Nourl = {http://doi.acm.org/10.1145/1978542.1978556},
	Number = {8},
	Numpages = {7},
	Pages = {55--61},
	Publisher = {ACM},
	Title = {The pain of implementing {LINQ} providers},
	Volume = {54},
	Year = {2011},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1978542.1978556},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1978542.1978556}}

@inproceedings{odersky2009fighting,
	Author = {Odersky, M. and Moors, A.},
	Booktitle = {IARCS Annual Conference on Foundations of Software Technology and Theoretical Computer Science},
	Date-Added = {2012-03-16 17:10:11 +0100},
	Date-Modified = {2012-03-16 17:10:49 +0100},
	Pages = {427--451},
	Title = {Fighting Bit Rot with Types (Experience Report: {{Scala}} Collections)},
	Volume = {4},
	Year = {2009}}

@article{Peyton-Jones02,
	Abstract = { ABSTRACT Higher-order languages such as Haskell encourage the programmer to build abstractions by composing functions. A good compiler must inline many of these calls to recover an efficiently executable program. In principle, inlining is dead simple: just replace the call of a function by an instance of its body. But any compiler-writer will tell you that inlining is a black art, full of delicate compromises that work together to give good performance without unnecessary code bloat. The purpose of this paper is, therefore, to articulate the key lessons we learned from a full-scale ``production'' inliner, the one used in the Glasgow Haskell compiler. We focus mainly on the algorithmic aspects, but we also provide some indicative measurements to substantiate the importance of various aspects of the inliner. },
	Author = {Peyton Jones, Simon And Marlow, Simon},
	Date-Added = {2012-03-16 16:14:52 +0100},
	Date-Modified = {2012-06-23 14:26:52 +0200},
	Eprint = {http://journals.cambridge.org/article_S0956796802004331},
	Journal = jfp,
	Keywords = {optimization},
	Nodoi = {10.1017/S0956796802004331},
	Nourl = {http://dx.doi.org/10.1017/S0956796802004331},
	Number = {4-5},
	Pages = {393-434},
	Title = {Secrets of the {Glasgow Haskell Compiler} inliner},
	Volume = {12},
	Year = {2002},
	Bdsk-Url-1 = {http://dx.doi.org/10.1017/S0956796802004331}}

@phdthesis{chambers1992design,
	Author = {Chambers, C.},
	Date-Added = {2012-03-16 16:07:06 +0100},
	Date-Modified = {2012-03-16 16:07:25 +0100},
	School = {Stanford University},
	Title = {The design and implementation of the {Self} compiler, an optimizing compiler for object-oriented programming languages},
	Year = {1992}}

@article{kuehne06matters,
	Author = {Thomas Kuehne},
	Bibsource = {DBLP, http://dblp.uni-trier.de},
	Date-Added = {2012-03-16 16:00:58 +0100},
	Date-Modified = {2012-03-16 16:00:58 +0100},
	Ee = {http://dx.doi.org/10.1007/s10270-006-0017-9},
	Journal = {Software and System Modeling},
	Nourl = {http://homepages.mcs.vuw.ac.nz/~tk/publications/papers/kuehne-matters.pdf},
	Number = {4},
	Pages = {369--385},
	Prg = {2011-08-31, Sebastian},
	Title = {Matters of (Meta-)Modeling},
	Volume = {5},
	Year = {2006},
	Bdsk-Url-1 = {http://homepages.mcs.vuw.ac.nz/~tk/publications/papers/kuehne-matters.pdf}}

@article{elliott03compiling,
	Author = {Elliott, Conal and Finne, Sigbjorn and de Moor, Oege},
	Date-Added = {2012-03-16 15:59:10 +0100},
	Date-Modified = {2012-06-23 14:23:06 +0200},
	Journal = jfp,
	Keywords = {DSEL; deep embedding},
	Nourl = {http://conal.net/papers/jfp-saig/compile-dsel.pdf},
	Number = 2,
	Pages = {455--481},
	Prg = {2011-08-24, Matteo},
	Title = {Compiling Embedded Languages},
	Volume = 13,
	Year = 2003,
	Bdsk-Url-1 = {http://conal.net/papers/jfp-saig/compile-dsel.pdf}}

@proceedings{DBLP:conf/oopsla/2003p,
	Bibsource = {DBLP, http://dblp.uni-trier.de},
	Booktitle = {OOPSLA},
	Editor = {Ron Crocker and Guy L. Steele Jr.},
	Noisbn = {1-58113-712-5},
	Publisher = {ACM},
	Title = {Proceedings of the 2003 ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages and Applications, OOPSLA 2003, October 26-30, 2003, Anaheim, CA, USA},
	Year = {2003}}

@inproceedings{DBLP:conf/oopsla/Cook92,
	Author = {William R. Cook},
	Bibsource = {DBLP, http://dblp.uni-trier.de},
	Booktitle = {OOPSLA},
	Pages = {1-15},
	Title = {Interfaces and Specifications for the Smalltalk-80 Collection Classes},
	Year = {1992}}

@inproceedings{Bierman:2007:LTF:1297027.1297063,
	Address = {New York, NY, USA},
	Author = {Bierman, Gavin M. and Meijer, Erik and Torgersen, Mads},
	Booktitle = oopsla,
	Date-Modified = {2012-03-29 10:40:24 +0200},
	Keywords = {C\#, LINQ},
	Numpages = {20},
	Pages = {479--498},
	Publisher = {ACM},
	Series = {OOPSLA '07},
	Title = {Lost in translation: formalizing proposed extensions to {C\#}},
	Year = {2007}}

@inproceedings{Meijer:2006:LRO:1142473.1142552,
	Address = {New York, NY, USA},
	Author = {Meijer, Erik and Beckman, Brian and Bierman, Gavin},
	Booktitle = sigmod,
	Date-Modified = {2012-06-23 14:27:31 +0200},
	Keywords = {LINQ},
	Numpages = {1},
	Pages = {706--706},
	Publisher = {ACM},
	Series = {SIGMOD '06},
	Title = {{LINQ}: reconciling objects, relations and {XML} in the {.NET} framework},
	Year = {2006}}

@inproceedings{Leijen99DSEC,
	Acmid = {331977},
	Address = {New York, NY, USA},
	Author = {Leijen, Daan and Meijer, Erik},
	Booktitle = dsl,
	Date-Added = {2012-03-26 02:43:28 +0200},
	Date-Modified = {2012-06-23 14:24:16 +0200},
	Keywords = {DSEL},
	Location = {Austin, Texas, United States},
	Noaddress = {Berkeley, CA, USA},
	Nodoi = {10.1145/331960.331977},
	Noisbn = {1-58113-255-7},
	Nopublisher = {USENIX Association},
	Nourl = {http://doi.acm.org/10.1145/331960.331977},
	Numpages = {14},
	Pages = {109--122},
	Publisher = {ACM},
	Series = {DSL '99},
	Title = {Domain specific embedded compilers},
	Year = {1999},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/331960.331977},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/331960.331977}}

@inproceedings{Grust:2009:FDP:1559845.1559982,
	Address = {New York, NY, USA},
	Author = {Grust, Torsten and Mayr, Manuel and Rittinger, Jan and Schreiber, Tom},
	Booktitle = sigmod,
	Date-Modified = {2012-06-23 14:20:36 +0200},
	Keywords = {ferry, linq, pathfinder, sql1999},
	Publisher = {ACM},
	Series = {SIGMOD '09},
	Title = {{FERRY}: database-supported program execution},
	Year = {2009}}

@article{JOT:issue_2010_07/article3,
	Author = {Miguel Garcia and Anastasia Izmaylova and Sibylle Schupp},
	Date-Modified = {2012-06-23 14:25:50 +0200},
	Journal = {Journal of Object Technology},
	Keywords = {query constructs},
	Month = jul,
	Number = {4},
	Pages = {45-68},
	Title = {Extending {Scala} with Database Query Capability},
	Volume = {9},
	Year = {2010}}

@inproceedings{Spiewak09scalaql:language-integrated,
	Author = {Daniel Spiewak and Tian Zhao},
	Booktitle = sle,
	Date-Modified = {2012-06-23 14:25:50 +0200},
	Keywords = {query constructs},
	Title = {{ScalaQL}: Language-integrated database queries for {Scala}},
	Year = {2009}}

@inproceedings{Wegrzynowicz:2009:GBU:1639950.1640032,
	Address = {New York, NY, USA},
	Author = {W\c{e}grzynowicz, Patrycja and Stencel, Krzysztof},
	Booktitle = oopsla,
	Date-Modified = {2012-04-11 15:09:04 +0200},
	Location = {Orlando, Florida, USA},
	Numpages = {2},
	Pages = {821--822},
	Publisher = {ACM},
	Series = {OOPSLA '09},
	Title = {The good, the bad, and the ugly: three ways to use a semantic code query system},
	Year = {2009}}
