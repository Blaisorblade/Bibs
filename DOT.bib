@article{Rapoport2019Path,
  archivePrefix = {arXiv},
  eprinttype = {arxiv},
  eprint = {1904.07298},
  primaryClass = {cs},
	title = {A Path To {{DOT}}: Formalizing Fully-Path-Dependent Types},
  url = {http://arxiv.org/abs/1904.07298},
  shorttitle = {A Path To {{DOT}}},
  abstract = {The Dependent Object Types (DOT) calculus aims to formalize the Scala programming language with a focus on path-dependent types \$-\$ types such as \$x.a\_1\textbackslash{}dots a\_n.T\$ that depend on the runtime value of a path \$x.a\_1\textbackslash{}dots a\_n\$ to an object. Unfortunately, existing formulations of DOT can model only types of the form \$x.A\$ which depend on variables rather than general paths. This restriction makes it impossible to model nested module dependencies. Nesting small components inside larger ones is a necessary ingredient of a modular, scalable language. DOT's variable restriction thus undermines its ability to fully formalize a variety of programming-language features including Scala's module system, family polymorphism, and covariant specialization. This paper presents the pDOT calculus, which generalizes DOT to support types that depend on paths of arbitrary length, as well as singleton types to track path equality. We show that naive approaches to add paths to DOT make it inherently unsound, and present necessary conditions for such a calculus to be sound. We discuss the key changes necessary to adapt the techniques of the DOT soundness proofs so that they can be applied to pDOT. Our paper comes with a Coq-mechanized type-safety proof of pDOT. With support for paths of arbitrary length, pDOT can realize DOT's full potential for formalizing Scala-like calculi.},
  urldate = {2019-04-17},
  date = {2019-04-15},
  year = {2019},
  keywords = {Computer Science - Programming Languages},
  author = {Rapoport, Marianna and Lhoták, Ondřej},
}

@inproceedings{Odersky2016Implementing,
  title = {Implementing Higher-Kinded Types in {{Dotty}}},
  isbn = {978-1-4503-4648-1},
  url = {http://dl.acm.org/citation.cfm?id=2998392.2998400},
  doi = {10.1145/2998392.2998400},
  eventtitle = {Proceedings of the 2016 7th {{ACM SIGPLAN Symposium}} on {{Scala}}},
  publisher = {{ACM}},
  urldate = {2019-08-12},
  date = {2016-10-30},
  year = {2016},
  pages = {51-60},
  author = {Odersky, Martin and Martres, Guillaume and Petrashko, Dmitry},
}

@article{Rapoport2017Simple,
	Abstract = {Dependent Object Types (DOT) is intended to be a core calculus for modelling Scala. Its distinguishing feature is abstract type members, fields in objects that hold types rather than values. Proving soundness of DOT has been surprisingly challenging, and existing proofs are complicated, and reason about multiple concepts at the same time (e.g. types, values, evaluation). To serve as a core calculus for Scala, DOT should be easy to experiment with and extend, and therefore its soundness proof needs to be easy to modify.   This paper presents a simple and modular proof strategy for reasoning in DOT. The strategy separates reasoning about types from other concerns. It is centred around a theorem that connects the full DOT type system to a restricted variant in which the challenges and paradoxes caused by abstract type members are eliminated. Almost all reasoning in the proof is done in the intuitive world of this restricted type system. Once we have the necessary results about types, we observe that the other aspects of DOT are mostly standard and can be incorporated into a soundness proof using familiar techniques known from other calculi.},
	Author = {Rapoport, Marianna and Kabir, Ifaz and He, Paul and Lhot\'ak, Ond{\v r}ej},
	Date-Added = {2018-11-29 13:45:45 +0100},
	Date-Modified = {2018-11-29 13:45:59 +0100},
	Doi = {10.1145/3133870},
	File = {/Users/pgiarrusso/Zotero/storage/UHEKZHVY/Rapoport-Kabir-He-Lhot{\'a}k - 2017 - A Simple Soundness Proof for Dependent Object Types.pdf;/Users/pgiarrusso/Zotero/storage/WNAKE2N8/Rapoport-Kabir-He-Lhot{\'a}k - 2017 - A Simple Soundness Proof for Dependent Object Types.pdf;/Users/pgiarrusso/Zotero/storage/B2NN7UZH/1706.html},
	Issn = {2475-1421},
	Journal = {Proc. ACM Program. Lang.},
	Keywords = {Computer Science - Programming Languages,type safety,_tablet,Scala,dependent object types,DOT calculus},
	Month = oct,
	Number = {OOPSLA},
	Pages = {46:1--46:27},
	Title = {A Simple Soundness Proof for Dependent Object Types},
	Volume = {1},
	Year = {2017}}

@article{Amin2012Dependent,
	Abstract = {We propose a new type-theoretic foundation of Scala and languages like it: the Dependent Object Types (DOT) calculus. DOT models Scala's path-dependent types, abstract type members and its mixture of nominal and structural typing through the use of refinement types. The core formalism makes no attempt to model inheritance and mixin composition. DOT normalizes Scala's type system by unifying the constructs for type members and by providing classical intersection and union types which simplify greatest lower bound and least upper bound computations. In this paper, we present the DOT calculus, both formally and informally. We also discuss our work-in-progress to prove typesafety of the calculus. Amin, Nada; Moors, Adriaan; Odersky, Martin},
	Author = {Amin, Nada and Moors, Adriaan and Odersky, Martin},
	Date-Added = {2018-11-29 13:44:09 +0100},
	Date-Modified = {2018-11-29 13:44:09 +0100},
	File = {/Users/pgiarrusso/Zotero/storage/QN5TDH3I/Amin-Moors-Odersky - 2012 - Dependent Object Types.pdf},
	Language = {en},
	Title = {Dependent Object Types},
	Year = {2012}}

@inproceedings{Rompf2016type,
	Abstract = {Scala's type system unifies aspects of ML modules, object- oriented, and functional programming. The Dependent Object Types (DOT) family of calculi has been proposed as a new theoretic foundation for Scala and similar expressive languages. Unfortunately, type soundness has only been established for restricted subsets of DOT. In fact, it has been shown that important Scala features such as type refinement or a subtyping relation with lattice structure break at least one key metatheoretic property such as environment narrowing or invertible subtyping transitivity, which are usually required for a type soundness proof. The main contribution of this paper is to demonstrate how, perhaps surprisingly, even though these properties are lost in their full generality, a rich DOT calculus that includes recursive type refinement and a subtyping lattice with intersection types can still be proved sound. The key insight is that subtyping transitivity only needs to be invertible in code paths executed at runtime, with contexts consisting entirely of valid runtime objects, whereas inconsistent subtyping contexts can be permitted for code that is never executed.},
	Address = {New York, NY, USA},
	Author = {Rompf, Tiark and Amin, Nada},
	Booktitle = {Proceedings of the 2016 {{ACM SIGPLAN International Conference}} on {{Object}}-{{Oriented Programming}}, {{Systems}}, {{Languages}}, and {{Applications}}},
	Date-Added = {2017-11-16 22:06:36 +0000},
	Date-Modified = {2017-11-16 22:06:36 +0000},
	Doi = {10.1145/2983990.2984008},
	File = {Rompf_Amin - 2016 - Type Soundness for Dependent Object Types (DOT).pdf:/Users/pgiarrusso/Zotero/storage/SJ7HCPXJ/Rompf_Amin - 2016 - Type Soundness for Dependent Object Types (DOT).pdf:application/pdf},
	Isbn = {978-1-4503-4444-9},
	Keywords = {dependent object types,Scala,_tablet,DOT,soundness},
	Pages = {624--641},
	Publisher = {{ACM}},
	Series = {OOPSLA 2016},
	Timestamp = {2016-11-01T13:07:50Z},
	Title = {Type {{Soundness}} for {{Dependent Object Types}} ({{DOT}})},
	Urldate = {2016-11-01},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2983990.2984008}}

@article{Rapoport2017simpleold,
	Abstract = {Dependent Object Types (DOT) is intended to be a core calculus for modelling Scala. Its distinguishing feature is abstract type members, fields in objects that hold types rather than values. Proving soundness of DOT has been surprisingly challenging, and existing proofs are complicated, and reason about multiple concepts at the same time (e.g. types, values, evaluation). To serve as a core calculus for Scala, DOT should be easy to experiment with and extend, and therefore its soundness proof needs to be easy to modify. This paper presents a simple and modular proof strategy for reasoning in DOT. The strategy separates reasoning about types from other concerns. It is centred around a theorem that connects the full DOT type system to a restricted variant in which the challenges and paradoxes caused by abstract type members are eliminated. Almost all reasoning in the proof is done in the intuitive world of this restricted type system. Once we have the necessary results about types, we observe that the other aspects of DOT are mostly standard and can be incorporated into a soundness proof using familiar techniques known from other calculi. Our paper comes with a machine-verified version of the proof in Coq.},
	Archiveprefix = {arXiv},
	Author = {Rapoport, Marianna and Kabir, Ifaz and He, Paul and Lhot{\'a}k, Ond{\v r}ej},
	Date-Added = {2017-11-14 22:33:37 +0000},
	Date-Modified = {2018-11-29 13:45:53 +0100},
	Eprint = {1706.03814},
	Eprinttype = {arxiv},
	File = {Rapoport et al - 2017 - A Simple Soundness Proof for Dependent Object Types.pdf:/Users/pgiarrusso/Zotero/storage/WNAKE2N8/Rapoport et al - 2017 - A Simple Soundness Proof for Dependent Object Types.pdf:application/pdf;arXiv.org Snapshot:/Users/pgiarrusso/Zotero/storage/B2NN7UZH/1706.html:text/html},
	Journal = {arXiv:1706.03814 [cs]},
	Keywords = {Computer Science - Programming Languages,_tablet},
	Month = jun,
	Primaryclass = {cs},
	Timestamp = {2017-09-11T13:44:07Z},
	Title = {A {{Simple Soundness Proof}} for {{Dependent Object Types}}},
	Year = {2017}}

@article{Rapoport2016mutable,
	Abstract = {The Dependent Object Types (DOT) calculus aims to model the essence of Scala, with a focus on abstract type members, path-dependent types, and subtyping. Other Scala features could be defined by translation to DOT. Mutation is a fundamental feature of Scala currently missing in DOT. Mutation in DOT is needed not only to model effectful computation and mutation in Scala programs, but even to precisely specify how Scala initializes immutable variables and fields (vals). We present an extension to DOT that adds typed mutable reference cells. We have proven the extension sound with a mechanized proof in Coq. We present the key features of our extended calculus and its soundness proof, and discuss the challenges that we encountered in our search for a sound design and the alternative solutions that we considered.},
	Archiveprefix = {arXiv},
	Author = {Rapoport, Marianna and Lhot{\'a}k, Ond{\v r}ej},
	Date-Added = {2017-11-14 22:33:37 +0000},
	Date-Modified = {2017-11-14 22:33:37 +0000},
	Eprint = {1611.07610},
	Eprinttype = {arxiv},
	File = {Rapoport_Lhot{\'a}k - 2016 - Mutable WadlerFest DOT.pdf:/Users/pgiarrusso/Zotero/storage/ZMG67T43/Rapoport_Lhot{\'a}k - 2016 - Mutable WadlerFest DOT.pdf:application/pdf;arXiv.org Snapshot:/Users/pgiarrusso/Zotero/storage/44R5R43B/1611.html:text/html},
	Journal = {arXiv:1611.07610 [cs]},
	Keywords = {Computer Science - Programming Languages,_tablet},
	Month = nov,
	Primaryclass = {cs},
	Timestamp = {2017-01-06T18:48:31Z},
	Title = {Mutable {{WadlerFest DOT}}},
	Urldate = {2017-01-06},
	Year = {2016}}

@inproceedings{Wang2017strong,
	Address = {Dagstuhl, Germany},
	Author = {Wang, Fei and Rompf, Tiark},
	Booktitle = {31st {{European Conference}} on {{Object}}-{{Oriented Programming}} ({{ECOOP}} 2017)},
	Date-Added = {2017-09-26 01:27:19 +0000},
	Date-Modified = {2017-09-26 01:27:19 +0000},
	Doi = {10.4230/LIPIcs.ECOOP.2017.27},
	Editor = {M{\"u}ller, Peter},
	File = {Wang_Rompf - 2017 - Towards Strong Normalization for Dependent Object Types (DOT).pdf:/Users/pgiarrusso/Library/Application Support/Zotero/Profiles/0lm7uqnz.default/zotero/storage/TQ28KV6T/Wang_Rompf - 2017 - Towards Strong Normalization for Dependent Object Types (DOT).pdf:application/pdf;Snapshot:/Users/pgiarrusso/Library/Application Support/Zotero/Profiles/0lm7uqnz.default/zotero/storage/JF5STNRB/7276.html:text/html},
	Isbn = {978-3-95977-035-4},
	Keywords = {DOT,logical relations,recursive types,Scala,Strong Normalization},
	Pages = {27:1--27:25},
	Publisher = {{Schloss Dagstuhl\textendash{}Leibniz-Zentrum fuer Informatik}},
	Series = {Leibniz International Proceedings in Informatics (LIPIcs)},
	Timestamp = {2017-09-25T23:29:39Z},
	Title = {Towards Strong Normalization for Dependent Object Types ({DOT})},
	Volume = {74},
	Year = {2017},
	Bdsk-Url-1 = {http://dx.doi.org/10.4230/LIPIcs.ECOOP.2017.27}}

@inproceedings{Amin2017Type,
	Acmid = {3009866},
	Address = {New York, NY, USA},
	Author = {Amin, Nada and Rompf, Tiark},
	Booktitle = {Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages},
	Date-Added = {2017-01-18 14:00:16 +0000},
	Date-Modified = {2017-01-18 14:00:18 +0000},
	Doi = {10.1145/3009837.3009866},
	Isbn = {978-1-4503-4660-3},
	Keywords = {DOT, Definitional interpreters, Scala, dependent object types, type soundness},
	Location = {Paris, France},
	Numpages = {14},
	Pages = {666--679},
	Publisher = {ACM},
	Series = {POPL 2017},
	Title = {Type Soundness Proofs with Definitional Interpreters},
	Url = {http://doi.acm.org/10.1145/3009837.3009866},
	Year = {2017},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/3009837.3009866},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/3009837.3009866}}

@inproceedings{Amin2012Dependent,
	Abstract = {We propose a new type-theoretic foundation of Scala and
                 languages like it: the Dependent Object Types (DOT)
                 calculus. DOT models Scala's path-dependent types,
                 abstract type members and its mixture of nominal and
                 structural typing through the use of refinement types. The
                 core formalism makes no attempt to model inheritance and
                 mixin composition. DOT normalizes Scala's type system by
                 unifying the constructs for type members and by providing
                 classical intersection and union types which simplify
                 greatest lower bound and least upper bound computations.
                 In this paper, we present the DOT calculus, both formally
                 and informally. We also discuss our work-in-progress to
                 prove typesafety of the calculus.},
	Affiliation = {EPFL},
	Author = {Amin, Nada and Moors, Adriaan and Odersky, Martin},
	Booktitle = {19{t}h {I}nternational {W}orkshop on {F}oundations of {O}bject-{O}riented {L}anguages},
	Date-Added = {2013-01-23 18:13:15 +0000},
	Date-Modified = {2013-01-23 18:13:17 +0000},
	Details = {http://infoscience.epfl.ch/record/183030},
	Documenturl = {http://infoscience.epfl.ch/record/183030/files/fool.pdf},
	Keywords = {calculus; objects; dependent types},
	Location = {Tucson, Arizona, USA},
	Oai-Id = {oai:infoscience.epfl.ch:183030},
	Oai-Set = {conf},
	Review = {REVIEWED},
	Status = {PUBLISHED},
	Submitter = {164625},
	Title = {Dependent {O}bject {T}ypes},
	Unit = {LAMP},
	Url = {https://github.com/namin/dot},
	Year = 2012,
	Bdsk-Url-1 = {https://github.com/namin/dot}}

@phdthesis{Amin2016Dependent,
  location = {{Lausanne, Switzerland}},
  title = {Dependent Object Types},
  url = {https://infoscience.epfl.ch/record/223518},
  doi = {10.5075/epfl-thesis-7156, urn:nbn:ch:bel-epfl-thesis7156-6},
  institution = {{EPFL}},
  urldate = {2017-05-23},
  year = {2016},
  author = {Amin, Nada},
}

@inproceedings{Schafer2015Autosubst,
  langid = {english},
  title = {Autosubst: {{Reasoning}} with de {{Bruijn Terms}} and {{Parallel Substitutions}}},
  url = {https://link.springer.com/chapter/10.1007/978-3-319-22102-1_24},
  doi = {10.1007/978-3-319-22102-1_24},
  shorttitle = {Autosubst},
  abstract = {Reasoning about syntax with binders plays an essential role in the formalization of the metatheory of programming languages. While the intricacies of binders can be ignored in paper proofs, formalizations involving binders tend to be heavyweight. We present a discipline for syntax with binders based on de Bruijn terms and parallel substitutions, with a decision procedure covering all assumption-free equational substitution lemmas. The approach is implemented in the Coq library Autosubst, which additionally derives substitution operations and proofs of substitution lemmas for custom term types. We demonstrate the effectiveness of the approach with several case studies, including part A of the POPLmark challenge.},
  eventtitle = {International {{Conference}} on {{Interactive Theorem Proving}}},
  booktitle = {Interactive {{Theorem Proving}}},
  publisher = {{Springer, Cham}},
  urldate = {2017-06-24},
  date = {2015-08-24},
  year = {2015},
  pages = {359-374},
  author = {Schäfer, Steven and Tebbi, Tobias and Smolka, Gert},
}
