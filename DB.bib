%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Paolo Giosu√© Giarrusso at 2017-03-05 09:32:01 +0100 


%% Saved with string encoding Unicode (UTF-8) 


@string{acm = {ACM}}

@string{acmaddr = {}}

@string{acp4is = {Proc.\ AOSD Workshop on Aspects, Components, and Patterns for Infrastructure Software (ACP4IS)}}

@string{addisonwesleylongman = {Addison-Wesley}}

@string{aosd = {Proc.\ Int'l Conf.\ Aspect-Oriented Software Development (AOSD)}}

@string{apsec = {Proc.\ Asia-Pacific Software Engineering Conf.\ (APSEC)}}

@string{ase = {Proc.\ Int'l Conf.\ Automated Software Engineering (ASE)}}

@string{btw = {Proc.\ GI-Fachtagung Datenbanksysteme f{\"u}r Business, Technologie und Web (BTW)}}

@string{cacm = {Commun.\ ACM}}

@string{cc = {Proc.\ Int'l Conf.\ Compiler Construction (CC)}}

@string{ccpe = {Concurrency and Computation: Practice and Experience}}

@string{chi = {Proc.\ Conf.\ Human Factors in Computing Systems (CHI)}}

@string{cidr = {Biennal Conf. Innovative Data Systems Research}}

@string{cpe = {Concurrency: Practice and Experience}}

@string{csmr = {Proc.\ European Conf.\ on Software Maintenance and Reengineering (CSMR)}}

@string{csur = {ACM Computing Surveys (CSUR)}}

@string{diplomarbeit = {Master's Thesis ({Diplomarbeit})}}

@string{ecoop = {ECOOP}}

@string{elsevier = {Elsevier}}

@string{elsevieraddr = {Amsterdam}}

@string{esecfse = {Proc.\ Europ.\ Software Engineering Conf./Foundations of Software Engineering (ESEC/FSE)}}

@string{etx = {Proc.\ OOPSLA Workshop on Eclipse Technology eXchange (ETX)}}

@string{etxe = {Proc.\ ECOOP Workshop on Eclipse Technology eXchange (ETX)}}

@string{eurosys = {Proc.\ European Conference on Computer Systems (EuroSys)}}

@string{fase = {Proc.\ Int'l Conf.\ Fundamental Approaches to Software Engineering}}

@string{fosd = {Proc.\ GPCE Workshop on Feature-Oriented Software Development (FOSD)}}

@string{fse = {Proc.\ Int'l Symposium Foundations of Software Engineering (FSE)}}

@string{gcse = {Proc.\ Int'l Conf.\ Generative and Component-Based Software Engineering (GCSE)}}

@string{gi = {Gesellschaft f{\"u}r Informatik (GI)}}

@string{giaddr = {Bonn}}

@string{gpce = {Proc.\ Int'l Conf.\ Generative Programming and Component Engineering (GPCE)}}

@string{icdcs = {Proc.\ Int'l Conf.\ Distributed Computing Systems (ICDCS)}}

@string{icfp = {Proc.\ Int'l Conf.\ Functional Programming}}

@string{icmt = {Proc.\ Int'l Conf.\ Theory and Practice of Model Transformations (ICMT)}}

@string{icpc = {Proc.\ Int'l Conf.\ Program Comprehension (ICPC)}}

@string{icre = {Proc.\ Int'l Conf.\ Requirements Engineering (ICRE)}}

@string{icse = {Proc.\ Int'l Conf.\ Software Engineering (ICSE)}}

@string{icsecomp = {Comp.\ Int'l Conf.\ Software Engineering (ICSE)}}

@string{icsm = {Proc.\ Int'l Conf.\ Software Maintenance (ICSM)}}

@string{icsr = {Proc.\ Int'l Conf.\ Software Reuse (ICSR)}}

@string{ieee = {IEEE Computer Society}}

@string{ieeeaddr = {Los Alamitos, CA}}

@string{ieeeaddrp = {Piscataway, NJ}}

@string{ieeeaddrw = {Washington, DC}}

@string{ieeesoftware = {IEEE Software}}

@string{infcomput = {Information and Computation}}

@string{ipdps = {Proc. Int'l. Parallel and Distributed Processing Symp.}}

@string{iwpc = {Proc.\ Int'l Workshop on Program Comprehension (IWPC)}}

@string{jase = {Automated Software Engineering}}

@string{jot = {Journal of Object Technology (JOT)}}

@string{kde = {IEEE Trans. Knowledge and Data Engineering}}

@string{ldta = {Proc.\ Workshop on Language Descriptions, Tools and Applications (LDTA)}}

@string{lnbip = {Lecture Notes in Business Information Processing}}

@string{lncs = {LNCS}}

@string{lzi = {Leibniz-Zentrum f{\"u}r Informatik (LZI)}}

@string{lziaddr = {Wadern}}

@string{macs = {Proc.\ ICSE Workshop on Modeling and Analysis of Concerns in Software (MACS)}}

@string{mdtech = {School of Computer Science, University of Magdeburg}}

@string{models = {Proc.\ Int'l Conf.\ Model Driven Engineering Languages and Systems (MoDELS)}}

@string{netobjectdays = {Proc. Int'l Conf.\ Object-Oriented and Internet-based Technologies, Concepts, and Applications for a Networked World (Net.ObjectDays)}}

@string{oopsla = {OOPSLA}}

@string{patech = {Department of Informatics and Mathematics, University of Passau}}

@string{pepm = {Proc.\ Workshop on Partial Evaluation and Semantics-Based Program Manipulation}}

@string{pldi = {Proc.\ Conf.\ Programming Language Design and Implementation}}

@string{pods = {Symp. Principles of Database Systems (PODS)}}

@string{popl = {POPL}}

@string{re = {Proc.\ Int'l Requirements Engineering Conf. (RE)}}

@string{sac = {Proc.\ Symp.\ Applied Computing (SAC)}}

@string{sc = {Proc.\ Int'l Conf.\ Software Composition (SC)}}

@string{scam = {Proc.\ Int'l Workshop Source Code Analysis and Manipulation (SCAM)}}

@string{scp = {Sci. Comput. Program.}}

@string{setmdm = {Proc.\ EDBT Workshop on Software Engineering for Tailor-made Data Management}}

@string{sigmod = {Proc.\ Int'l SIGMOD Conf.\ on Management of Data}}

@string{sigplannot = {SIGPLAN Notices}}

@string{sigsoftnotice = {SIGSOFT Softw. Eng. Notes}}

@string{spe = {Software: Practice and Experience}}

@string{splc = {Proc.\ Int'l Software Product Line Conference (SPLC)}}

@string{split = {Proc.\ SPLC Workshop on Software Product Line Testing (SPLiT)}}

@string{springer = {Springer-Verlag}}

@string{springeraddr = {}}

@string{springeraddr-not = {Berlin/Heidelberg}}

@string{springeraddrbhn = {Berlin/Heidelberg/New York}}

@string{springeraddrl = {London}}

@string{springeraddrnj = {Secaucus, NJ}}

@string{springeraddrnl = {Dordrecht}}

@string{springeraddrny = {New York}}

@string{springerbase = {Springer}}

@string{springernl = {Springer Netherlands}}

@string{tocs = {ACM Trans. Comp. Syst. (TOCS)}}

@string{tods = {ACM Trans. Database Systems (TODS)}}

@string{tools = {Proc.\ Int'l Conf.\ Objects, Models, Components, Patterns (TOOLS EUROPE)}}

@string{toplas = {TOPLAS}}

@string{tosem = {ACM Trans. Softw. Eng. Methodol. (TOSEM)}}

@string{tpds = {IEEE Trans.\ Parallel Distr.\ Systems (TPDS)}}

@string{tse = {IEEE Trans.\ Softw.\ Eng. (TSE)}}

@string{vamos = {Proc.\ Int'l Workshop on Variability Modelling of Software-intensive Systems (VaMoS)}}

@string{visple = {Proc.\ SPLC Workshop on Visualization in Software Product Line Engineering (ViSPLE)}}

@string{vldb = {Proc.\ Int'l Conf.\ Very Large Data Bases (VLDB)}}

@string{wcre = {Proc.\ Working Conf.\ Reverse Engineering (WCRE)}}

@string{wgp = {Proc.\ SIGPLAN Workshop on Generic Programming}}

@string{wiley = {John Wiley \& Sons, Inc.}}

@string{wileyaddr = {New York, NY}}

@string{wrt = {Proc.\ ECOOP Workshop on Refactoring Tools (WRT)}}


@article{Koch2014incremental,
	Abstract = {In the context of incremental view maintenance (IVM), delta query derivation is an essential technique for speeding up the processing of large, dynamic datasets. The goal is to generate delta queries that, given a small change in the input, can update the materialized view more efficiently than via recomputation. In this work we propose the first solution for the efficient incrementalization of positive nested relational calculus (NRC+) on bags (with integer multiplicities). More precisely, we model the cost of NRC+ operators and classify queries as efficiently incrementalizable if their delta has a strictly lower cost than full re-evaluation. Then, we identify IncNRC+; a large fragment of NRC+ that is efficiently incrementalizable and we provide a semantics-preserving translation that takes any NRC+ query to a collection of IncNRC+ queries. Furthermore, we prove that incremental maintenance for NRC+ is within the complexity class NC0 and we showcase how recursive IVM, a technique that has provided significant speedups over traditional IVM in the case of flat queries [25], can also be applied to IncNRC+.},
	Archiveprefix = {arXiv},
	Author = {Koch, Christoph and Lupei, Daniel and Tannen, Val},
	Date-Added = {2017-03-05 08:31:07 +0000},
	Date-Modified = {2017-03-05 08:31:07 +0000},
	Eprint = {1412.4320},
	Eprinttype = {arxiv},
	File = {Koch et al - 2014 - Incremental View Maintenance For Collection Programming.pdf:/Users/pgiarrusso/Library/Application Support/Zotero/Profiles/0lm7uqnz.default/zotero/storage/7228TF5T/Koch et al - 2014 - Incremental View Maintenance For Collection Programming.pdf:application/pdf;arXiv.org Snapshot:/Users/pgiarrusso/Library/Application Support/Zotero/Profiles/0lm7uqnz.default/zotero/storage/PBEFC3H6/1412.html:text/html},
	Journal = {arXiv:1412.4320 [cs]},
	Keywords = {Computer Science - Databases},
	Month = dec,
	Primaryclass = {cs},
	Timestamp = {2016-10-12T12:13:11Z},
	Title = {Incremental {{View Maintenance For Collection Programming}}},
	Urldate = {2016-10-12},
	Year = {2014}}

@inproceedings{Koch2016incremental,
	Abstract = {In the context of incremental view maintenance (IVM), delta query derivation is an essential technique for speeding up the processing of large, dynamic datasets. The goal is to generate delta queries that, given a small change in the input, can update the materialized view more efficiently than via recomputation. In this work we propose the first solution for the efficient incrementalization of positive nested relational calculus (NRC+) on bags (with integer multiplicities). More precisely, we model the cost of NRC+ operators and classify queries as efficiently incrementalizable if their delta has a strictly lower cost than full re-evaluation. Then, we identify NRC+, a large fragment of NRC+ that is efficiently incrementalizable and we provide a semantics-preserving translation that takes any NRC+ query to a collection of IncNRC+ queries. Furthermore, we prove that incremental maintenance for NRC+ is within the complexity class NC0 and we showcase how recursive IVM, a technique that has provided significant speedups over traditional IVM in the case of flat queries [25], can also be applied to IncNRC+.},
	Address = {New York, NY, USA},
	Author = {Koch, Christoph and Lupei, Daniel and Tannen, Val},
	Booktitle = {Proceedings of the 35th {{ACM SIGMOD}}-{{SIGACT}}-{{SIGAI Symposium}} on {{Principles}} of {{Database Systems}}},
	Date-Added = {2017-03-05 08:31:07 +0000},
	Date-Modified = {2017-03-05 08:31:07 +0000},
	Doi = {10.1145/2902251.2902286},
	File = {Koch et al - 2016 - Incremental View Maintenance For Collection Programming.pdf:/Users/pgiarrusso/Library/Application Support/Zotero/Profiles/0lm7uqnz.default/zotero/storage/7R9T3699/Koch et al - 2016 - Incremental View Maintenance For Collection Programming.pdf:application/pdf},
	Isbn = {978-1-4503-4191-2},
	Keywords = {collection programming,higher-order delta derivation,incremental computation,Incremental view maintenance,nested relational algebra,nested relational calculus,recursive ivm,shredding transformation},
	Pages = {75--90},
	Publisher = {{ACM}},
	Series = {PODS '16},
	Timestamp = {2016-10-12T12:12:24Z},
	Title = {Incremental {{View Maintenance For Collection Programming}}},
	Urldate = {2016-10-12},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2902251.2902286}}

@article{Lupei2014incremental,
	Abstract = {Incremental view maintenance is an essential tool for speeding up the processing of large, locally changing workloads. Its fundamental challenge is to ensure that changes are propagated from input to output more efficiently than via recomputation. We formalize this requirement for positive nested relational algebra (NRA+) on bags and we propose a transformation deriving deltas for any expression in the language. The main difficulty in maintaining nested queries lies in the inability to express within NRA+ the efficient updating of inner bags, i.e., without completely replacing the tuples that contain them. To address this problem, we first show how to efficiently incrementalize IncNRA+, a large fragment of NRA+ whose deltas never generate inner bag updates. We then provide a semantics-preserving transformation that takes any nested query into a collection of IncNRA+ queries. This constitutes the first static solution for the efficient incremental processing of languages with nested collections. Furthermore, we show that the state-of-the-art technique of recursive IVM, originally developed for positive relational algebra with aggregation, also extends to nested queries. Finally, we generalize our static approach for the efficient incrementalization of NRA+ to a family of simply-typed lambda calculi, given that its primitives are themselves efficiently incrementalizable.},
	Archiveprefix = {arXiv},
	Author = {Lupei, Daniel and Koch, Christoph and Tannen, Val},
	Date-Added = {2017-03-05 08:31:07 +0000},
	Date-Modified = {2017-03-05 08:31:07 +0000},
	Eprint = {1412.4320},
	Eprinttype = {arxiv},
	File = {Lupei et al - 2014 - Incremental View Maintenance for Nested-Relational Databases.pdf:/Users/pgiarrusso/Library/Application Support/Zotero/Profiles/0lm7uqnz.default/zotero/storage/F9BUNHPP/Lupei et al - 2014 - Incremental View Maintenance for Nested-Relational Databases.pdf:application/pdf;arXiv.org Snapshot:/Users/pgiarrusso/Library/Application Support/Zotero/Profiles/0lm7uqnz.default/zotero/storage/FJMHM53K/1412.html:text/html},
	Journal = {arXiv:1412.4320 [cs]},
	Keywords = {_tablet,Computer Science - Databases},
	Month = dec,
	Primaryclass = {cs},
	Timestamp = {2016-02-29T23:17:09Z},
	Title = {Incremental {{View Maintenance}} for {{Nested}}-{{Relational Databases}}},
	Urldate = {2014-12-20},
	Year = {2014}}

@techreport{Koch13IQE,
	Abstract = {This article approaches the incremental view maintenance problem from an algebraic perspective. The algebraic structure of a ring of databases is constructed and extended to form a powerful aggregate query calculus. The query calculus inherits the key properties of rings, such as distributivity and the existence of an additive inverse. As a consequence, the calculus has a normal form of polynomials and is closed under a universal difference operator. This difference operator allows to express the so-called delta queries of the incremental view maintenance literature, but also deltas to the deltas (second deltas), deltas to second deltas (third deltas), and so on. The k-th delta of a query of polynomial degree k is purely a function of the update, not of the database. This gives rise to a multi-layered incremental view maintenance scheme in which a view is maintained using a hierarchy of auxiliary materialized views of k-th deltas. What is gained by this hierarchy is that the work required to keep all views fresh given an update is extremely simple.  <p/> The method allows to eliminate expensive query operators such as joins and aggregate sums entirely from programs that perform incremental view maintenance. The main result is that, for non-nested queries, each individual aggregate value can be incrementally maintained using a constant amount of work. This is not possible for nonincremental evaluation and provides a complexity separation between the incremental and nonincremental query evaluation problems.  <p/> As a byproduct, we obtain a query language that is significant in its own right. It is an algebraic language in which queries, like in relational calculus, are built up from base objects (generalized relations) using an extremely small set of connectives -- addition, multiplication, and aggregation. It is based on a family of algebraic structures developed in this article -- called avalanche (semi)rings -- which algebraizes range-restriction. Thus these structures guarantee finite query results in the presence of inequalities, without making use of an explicit selection operation. The entire language behaves like a polynomial ring of relations and thus makes algebraic manipulation very easy. As a simple algebraic language of interesting expressive power -- relational algebra with SQL-style aggregation and unlimited nesting -- it is a natural internal representation language for query processors and compilers.},
	Annote = {Revised version of PODS 2010 paper},
	Author = {Koch, Christoph},
	Date-Added = {2014-03-30 11:13:54 +0000},
	Date-Modified = {2014-03-30 11:16:06 +0000},
	Institution = {EPFL},
	Keywords = {incremental view maintenance; compilers},
	Local-Url = {http://infoscience.epfl.ch/record/183766/files/main.pdf},
	Number = {EPFL-REPORT-183766},
	Title = {Incremental Query Evaluation in a Ring of Databases},
	Url = {http://infoscience.epfl.ch/record/183766},
	Year = {2013},
	Bdsk-Url-1 = {http://infoscience.epfl.ch/record/183766}}

@article{Koch14,
	Author = {Koch, Christoph and Ahmad, Yanif and Kennedy, Oliver and Nikolic, Milos and N{\"o}tzli, Andres and Lupei, Daniel and Shaikhha, Amir},
	Date-Added = {2014-03-30 11:13:05 +0000},
	Date-Modified = {2014-03-30 11:13:05 +0000},
	Doi = {10.1007/s00778-013-0348-4},
	Issn = {1066-8888},
	Journal = {The VLDB Journal},
	Keywords = {Database queries; Materialized views; Incremental view maintenance; Compilation},
	Language = {English},
	Number = {2},
	Pages = {253-278},
	Publisher = {Springer Berlin Heidelberg},
	Title = {{DBToaster}: higher-order delta processing for dynamic, frequently fresh views},
	Url = {http://dx.doi.org/10.1007/s00778-013-0348-4},
	Volume = {23},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s00778-013-0348-4}}

@inproceedings{Blakeley:1986:EUM,
	Abstract = {Query processing can be sped up by keeping frequently accessed users' views materialized. However, the need to access base relations in response to queries can be avoided only if the materialized view is adequately maintained. We propose a method in which all database updates to base relations are first filtered to remove from consideration those that cannot possibly affect the view. The conditions given for the detection of updates of this type, called irrelevant updates, are necessary and sufficient and are independent of the database state. For the remaining database updates, a differential algorithm can be applied to re-evaluate the view expression. The algorithm proposed exploits the knowledge provided by both the view definition expression and the database update operations.},
	Acmid = {16861},
	Annote = {Christoph Koch recommended citing this early work.},
	Author = {Blakeley, Jose A. and Larson, Per-Ake and Tompa, Frank Wm},
	Booktitle = {SIGMOD},
	Date-Added = {2014-03-12 22:24:17 +0000},
	Date-Modified = {2014-03-12 22:24:47 +0000},
	Location = {Washington, D.C., USA},
	Noaddress = {New York, NY, USA},
	Nobooktitle = {Proceedings of the 1986 ACM SIGMOD International Conference on Management of Data},
	Nodoi = {10.1145/16894.16861},
	Noisbn = {0-89791-191-1},
	Noseries = {SIGMOD '86},
	Nourl = {http://doi.acm.org/10.1145/16894.16861},
	Numpages = {11},
	Pages = {61--71},
	Publisher = {ACM},
	Title = {Efficiently Updating Materialized Views},
	Year = {1986},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/16894.16861},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/16894.16861}}

@inproceedings{Fegaras95,
	Acmid = {223789},
	Address = {New York, NY, USA},
	Author = {Fegaras, Leonidas and Maier, David},
	Booktitle = {Proceedings of the 1995 ACM SIGMOD international conference on Management of data},
	Date-Added = {2013-09-11 03:01:49 +0000},
	Date-Modified = {2013-09-11 03:01:51 +0000},
	Doi = {10.1145/223784.223789},
	Isbn = {0-89791-731-6},
	Location = {San Jose, California, USA},
	Numpages = {12},
	Pages = {47--58},
	Publisher = {ACM},
	Series = {SIGMOD '95},
	Title = {Towards an effective calculus for object query languages},
	Url = {http://doi.acm.org/10.1145/223784.223789},
	Year = {1995},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/223784.223789},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/223784.223789}}

@inproceedings{mcsherry2013differential,
	Abstract = {Existing computational models for processing continuously changing input data are unable to efficiently support iterative queries except in limited special cases. This makes it difficult to perform complex tasks, such as social-graph analysis on changing data at interactive timescales, which would greatly benefit those analyzing the behavior of services like Twitter. In this paper we introduce a new model called differential computation, which extends traditional incremental computation to allow arbitrarily nested iteration, and explain---with reference to a publicly available prototype system called Naiad---how differential computation can be efficiently implemented in the context of a declarative data-parallel dataflow language. The resulting system makes it easy to program previously intractable algorithms such as incrementally updated strongly connected components, and integrate them with data transformation operations to obtain practically relevant insights from real data streams.},
	Author = {McSherry, Frank and Murray, Derek G and Isaacs, Rebecca and Isard, Michael},
	Booktitle = {6th Biennial Conference on Innovative Data Systems Research (CIDR '13)},
	Date-Added = {2013-05-31 14:54:10 +0000},
	Date-Modified = {2013-05-31 14:55:59 +0000},
	Nourl = {http://research.microsoft.com/apps/pubs/default.aspx?id=176693},
	Title = {Differential dataflow},
	Year = {2013}}

@inproceedings{Giorgidze13,
	Acmid = {2429379},
	Address = {New York, NY, USA},
	Author = {Giorgidze, George and Grust, Torsten and Ulrich, Alexander and Weijers, Jeroen},
	Booktitle = {Proceedings of the 2013 workshop on Data driven functional programming},
	Date-Added = {2013-02-15 14:02:54 +0000},
	Date-Modified = {2013-05-20 22:52:48 +0000},
	Doi = {10.1145/2429376.2429379},
	Isbn = {978-1-4503-1871-6},
	Keywords = {algebraic data type, database, programming language},
	Location = {Rome, Italy},
	Numpages = {6},
	Pages = {5--10},
	Publisher = {ACM},
	Read = {1},
	Series = {DDFP '13},
	Title = {Algebraic data types for language-integrated queries},
	Url = {http://doi.acm.org/10.1145/2429376.2429379},
	Year = {2013},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2429376.2429379},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2429376.2429379}}

@inproceedings{Acar13,
	Acmid = {2429382},
	Address = {New York, NY, USA},
	Annote = {They claim a 500-fold speedup between a pure MapReduce program and their incremental version. The pure program maintains the result by iterating over the input line by line, starting from an empty input, and doing the full computation (with cost O(n) and significant overhead) at each round. Hence, the overall runtime is quadratic - 12.5 hours on the benchmark input. Their incremental ML implementation takes 1.7 minutes.

Doing the same computation only on the full data takes 31 seconds with Hadoop, 21 with their ML implementation, on a single node.

They report that Hadoop is a batch system with significant overhead. Still, for fairness, instead of single-node Hadoop, they should compare against the non-incremental version of the same code, which would be faster and a more apple-to-apple comparison.},
	Author = {Acar, Umut A. and Chen, Yan},
	Booktitle = {Proceedings of the 2013 workshop on Data driven functional programming},
	Date-Added = {2013-02-15 14:00:03 +0000},
	Date-Modified = {2013-02-15 15:31:05 +0000},
	Doi = {10.1145/2429376.2429382},
	Isbn = {978-1-4503-1871-6},
	Keywords = {incremental mapreduce, self-adjusting computation},
	Location = {Rome, Italy},
	Numpages = {4},
	Pages = {15--18},
	Publisher = {ACM},
	Rating = {2},
	Read = {1},
	Series = {DDFP '13},
	Title = {Streaming big data with self-adjusting computation},
	Url = {http://doi.acm.org/10.1145/2429376.2429382},
	Year = {2013},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2429376.2429382},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2429376.2429382}}

@inproceedings{Ackermann12,
	Abstract = {Cluster computing systems today impose a trade-off
                 between generality, performance and productivity. Hadoop
                 and Dryad force programmers to write low level programs
                 that are tedious to compose but easy to optimize. Systems
                 like Dryad/LINQ and Spark allow concise modeling of user
                 programs but do not apply relational optimizations. Pig
                 and Hive restrict the language to achieve relational
                 optimizations, making complex programs hard to express
                 without user extensions. However, these extensions are
                 cumbersome to write and disallow program optimizations.
                 We present a distributed batch data processing framework
                 called Jet. Jet uses deep language embedding in Scala,
                 multi-stage programming and explicit side effect tracking
                 to analyze the structure of user programs. The analysis
                 is used to apply projection insertion, which eliminates
                 unused data, as well as code motion and operation fusion
                 to highly optimize the performance critical path of the
                 program. The language embedding and a high-level
                 interface allow Jet programs to be both expressive,
                 resembling regular Scala code, and optimized. Its modular
                 design allows users to extend Jet with modules that
                 produce good performing code. Through a modular code
                 generation scheme, Jet can generate programs for both
                 Spark and Hadoop. Compared with na{\"\i}ve implementations we
                 achieve 143\% speedups on Spark and 126\% on Hadoop.},
	Affiliation = {EPFL},
	Author = {Ackermann, Stefan and Jovanovic, Vojin and Rompf, Tiark and Odersky, Martin},
	Booktitle = {Int'l {W}orkshop on {E}nd-to-end {M}anagement of {B}ig {D}ata ({B}ig{D}ata)},
	Date-Added = {2013-01-23 18:13:59 +0000},
	Date-Modified = {2013-01-23 18:14:00 +0000},
	Details = {http://infoscience.epfl.ch/record/181673},
	Documenturl = {http://infoscience.epfl.ch/record/181673/files/paper.pdf},
	Keywords = {Domain-specific Languages, Multi-stage Programming, MapReduce, Operation Fusion, Projection Insertion},
	Oai-Id = {oai:infoscience.epfl.ch:181673},
	Oai-Set = {conf},
	Review = {REVIEWED},
	Status = {PUBLISHED},
	Submitter = {185682},
	Title = {Jet: An Embedded {DSL} for High Performance Big Data Processing},
	Unit = {LAMP},
	Year = 2012}

@inproceedings{Wong93,
	Acmid = {153853},
	Address = {New York, NY, USA},
	Author = {Wong, Limsoon},
	Booktitle = pods,
	Date-Added = {2012-12-31 03:56:40 +0000},
	Date-Modified = {2012-12-31 03:56:42 +0000},
	Doi = {10.1145/153850.153853},
	Isbn = {0-89791-593-3},
	Location = {Washington, D.C., United States},
	Numpages = {11},
	Pages = {26--36},
	Publisher = {ACM},
	Series = {PODS '93},
	Title = {Normal forms and conservative properties for query languages over collection types},
	Url = {http://doi.acm.org/10.1145/153850.153853},
	Year = {1993},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/153850.153853},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/153850.153853}}

@inproceedings{Griffin95IMV,
	Acmid = {223849},
	Address = {New York, NY, USA},
	Author = {Griffin, Timothy and Libkin, Leonid},
	Booktitle = {Proceedings of the 1995 ACM SIGMOD international conference on Management of data},
	Date-Added = {2012-12-17 14:38:00 +0000},
	Date-Modified = {2013-05-13 09:21:18 +0000},
	Doi = {10.1145/223784.223849},
	Isbn = {0-89791-731-6},
	Keywords = {incremental view maintenance},
	Location = {San Jose, California, United States},
	Numpages = {12},
	Pages = {328--339},
	Publisher = {ACM},
	Series = {SIGMOD '95},
	Title = {Incremental maintenance of views with duplicates},
	Url = {http://doi.acm.org/10.1145/223784.223849},
	Year = {1995},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/223784.223849},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/223784.223849}}

@article{Lu95a,
	Acmid = {223850},
	Address = {New York, NY, USA},
	Author = {Lu, James J. and Moerkotte, Guido and Schue, Joachim and Subrahmanian, V. S.},
	Date-Added = {2012-12-10 19:30:54 +0000},
	Date-Modified = {2013-05-13 09:21:31 +0000},
	Doi = {10.1145/568271.223850},
	Issn = {0163-5808},
	Issue_Date = {May 1995},
	Journal = {SIGMOD Rec.},
	Keywords = {incremental view maintenance},
	Month = may,
	Number = {2},
	Numpages = {12},
	Pages = {340--351},
	Publisher = {ACM},
	Title = {Efficient maintenance of materialized mediated views},
	Url = {http://doi.acm.org/10.1145/568271.223850},
	Volume = {24},
	Year = {1995},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/568271.223850},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/568271.223850}}

@inproceedings{Lu95,
	Acmid = {223850},
	Address = {New York, NY, USA},
	Author = {Lu, James J. and Moerkotte, Guido and Schue, Joachim and Subrahmanian, V. S.},
	Booktitle = {Proceedings of the 1995 ACM SIGMOD international conference on Management of data},
	Date-Added = {2012-12-10 19:30:54 +0000},
	Date-Modified = {2013-05-13 09:21:31 +0000},
	Doi = {10.1145/223784.223850},
	Isbn = {0-89791-731-6},
	Keywords = {incremental view maintenance},
	Location = {San Jose, California, United States},
	Numpages = {12},
	Pages = {340--351},
	Publisher = {ACM},
	Series = {SIGMOD '95},
	Title = {Efficient maintenance of materialized mediated views},
	Url = {http://doi.acm.org/10.1145/223784.223850},
	Year = {1995},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/223784.223850},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/223784.223850}}

@inproceedings{EL-Sayed02Algebraic,
	Acmid = {584950},
	Address = {New York, NY, USA},
	Author = {EL-Sayed, Maged and Wang, Ling and Ding, Luping and Rundensteiner, Elke A.},
	Booktitle = {Proceedings of the 4th international workshop on Web information and data management},
	Date-Added = {2012-12-07 12:35:01 +0000},
	Date-Modified = {2013-05-13 09:23:03 +0000},
	Doi = {10.1145/584931.584950},
	Isbn = {1-58113-593-9},
	Keywords = {XML, XML query algebra; incremental view maintenance},
	Location = {McLean, Virginia, USA},
	Numpages = {4},
	Pages = {88--91},
	Publisher = {ACM},
	Series = {WIDM '02},
	Title = {An algebraic approach for incremental maintenance of materialized XQuery views},
	Url = {http://doi.acm.org/10.1145/584931.584950},
	Year = {2002},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/584931.584950},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/584931.584950}}

@article{Kallman:2008:HStore,
	Acmid = {1454211},
	Author = {Kallman, Robert and Kimura, Hideaki and Natkins, Jonathan and Pavlo, Andrew and Rasin, Alexander and Zdonik, Stanley and Jones, Evan P. C. and Madden, Samuel and Stonebraker, Michael and Zhang, Yang and Hugg, John and Abadi, Daniel J.},
	Date-Added = {2012-08-05 19:39:28 +0200},
	Date-Modified = {2012-08-05 19:39:38 +0200},
	Doi = {10.1145/1454159.1454211},
	Issn = {2150-8097},
	Issue_Date = {August 2008},
	Journal = {Proc. VLDB Endow.},
	Nomonth = aug,
	Number = {2},
	Numpages = {4},
	Pages = {1496--1499},
	Publisher = {VLDB Endowment},
	Title = {H-store: a high-performance, distributed main memory transaction processing system},
	Url = {http://dx.doi.org/10.1145/1454159.1454211},
	Volume = {1},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/1454159.1454211}}

@inproceedings{Stonebraker07onesize,
	Author = {Michael Stonebraker and Chuck Bear and Mitch Cherniack and Tingjian Ge and Nabil Hachem and Stavros Harizopoulos and John Lifter and Jennie Rogers and Stan Zdonik},
	Booktitle = cidr,
	Date-Added = {2012-07-30 16:01:34 +0200},
	Date-Modified = {2012-07-30 16:01:34 +0200},
	Read = {1},
	Title = {One size fits all? -- Part 2: benchmarking results},
	Year = {2007}}

@inproceedings{Stonebraker07,
	Acmid = {1325981},
	Author = {Stonebraker, Michael and Madden, Samuel and Abadi, Daniel J. and Harizopoulos, Stavros and Hachem, Nabil and Helland, Pat},
	Booktitle = VLDB,
	Date-Added = {2012-07-09 15:14:02 +0200},
	Date-Modified = {2012-07-09 17:22:53 +0200},
	Location = {Vienna, Austria},
	Noisbn = {978-1-59593-649-3},
	Noseries = {VLDB '07},
	Nourl = {http://dl.acm.org/citation.cfm?id=1325851.1325981},
	Numpages = {11},
	Pages = {1150--1160},
	Publisher = {VLDB Endowment},
	Title = {The end of an architectural era: (it's time for a complete rewrite)},
	Year = {2007},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=1325851.1325981}}

@article{Fegaras99,
	Abstract = {Object-oriented databases (OODBs) provide powerful data abstractions and modeling facilities but they usually lack a suitable framework for query processing and optimization. Even though there is an increasing number of recent proposals on OODB query optimization, only few of them are actually focused on query optimization in the presence of object identity and destructive updates, features often supported by most realistic OODB languages. This paper presents a formal framework for optimizing object-oriented queries in the presence of side effects. These queries may contain object updates at any place and in any form. We present a language extension to the monoid comprehension calculus to express these object-oriented features and we give a formal meaning to these extensions. Our method is based on denotational semantics, which is often used to give a formal meaning to imperative programming languages. The semantics of our language extensions is expressed in terms of our monoid calculus, without the need of any fundamental change to our basic framework. Our method not only maintains referential transparency, which allows us to do meaningful query optimization, but it is also practical for optimizing OODB queries since it allows the same optimization techniques applied to regular queries to be used with minimal changes for OODB queries with updates.},
	Author = {Fegaras, Leonidas},
	Date-Added = {2012-07-09 12:07:42 +0200},
	Date-Modified = {2012-07-09 12:07:43 +0200},
	Issn = {0925-9902},
	Issue = {2},
	Journal = {Journal of Intelligent Information Systems},
	Keyword = {Computer Science},
	Note = {10.1023/A:1008757010516},
	Pages = {219-242},
	Publisher = springernl,
	Title = {Optimizing Queries with Object Updates},
	Url = {http://dx.doi.org/10.1023/A:1008757010516},
	Volume = {12},
	Year = {1999},
	Bdsk-Url-1 = {http://dx.doi.org/10.1023/A:1008757010516}}

@article{Litwin92,
	Abstract = {Object-oriented database systems (OODBs) have created a demand for relationally complete, extensible, and declarative object-oriented query languages. Until now, the runtime performance of such languages was far behind that of procedural OO interfaces. One reason is the internal use of a relational engine with magnetic disk resident databases. The authors address the processing of the declarative OO language WS-OSQL, provided by the fully operational prototype OODB called WS-IRIS. A WS-IRIS database is main memory (MM) resident. The system architecture, data structures, and optimization techniques are designed accordingly. WS-OSQL queries are compiled into an OO extension of Datalog called ObjectLog, providing for objects, typing, overloading, and foreign predicates for extensibility. Cost-based optimizations in WS-IRIS using ObjectLog are presented. Performance tests show that WS-IRIS is about as fast as current OODBs with procedural interfaces only and is much faster than known relationally complete systems. These results would not be possible for a traditional disk-based implementation. However, MM residency of a database appears to be only a necessary condition for better performance. An efficient optimization is of crucial importance as well},
	Author = {Litwin, W. and Risch, T.},
	Date-Added = {2012-07-09 12:07:23 +0200},
	Date-Modified = {2012-07-09 12:07:40 +0200},
	Doi = {10.1109/69.180603},
	Issn = {1041-4347},
	Journal = {Knowledge and Data Engineering, IEEE Transactions on},
	Keywords = {ObjectLog;WS-IRIS database;WS-OSQL;data structures;declarative object-oriented language;foreign predicates;magnetic disk resident databases;main memory resident;object-oriented database;object-oriented query languages;optimization techniques;overloading;relational engine;system architecture;typed Datalog;typing;object-oriented databases;object-oriented languages;query languages;query processing;relational databases;},
	Nomonth = {dec},
	Number = {6},
	Pages = {517 -528},
	Title = {Main memory orientated optimization of OO queries using typed Datalog with foreign predicates},
	Volume = {4},
	Year = {1992},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/69.180603}}

@book{Garcia-Molina08dscb,
	Author = {Garcia-Molina, Hector and Ullman, Jeffrey D. and Widom, Jennifer},
	Date-Added = {2012-06-29 17:25:39 +0200},
	Date-Modified = {2012-06-29 17:26:03 +0200},
	Edition = {2},
	Isbn = {9780131873254},
	Noaddress = {Upper Saddle River, NJ, USA},
	Publisher = {Prentice Hall Press},
	Title = {Database Systems: The Complete Book},
	Year = {2008}}

@incollection{Kroger99CROQUE,
	Abstract = {In query optimization, a given query will be transformed by rewrite rules into an equivalent execution plan that is cheaper than the straightforwardly assigned plan according to some cost model. Finding the cheapest of all equivalent execution plans is a challenge since the rewriting of complex queries on the basis of a large set of rewriting rules may potentially span a very large space of equivalent plans. Consequently, one has to either use search strategies to explore (parts of) the search space or some heuristics to prune this space thus making it efficiently traversable. This paper presents the use of search strategies in the CROQUE project. The adaptation of some common strategies led to the development of a simple but powerful heuristics which is demonstrated by examples executed in the CROQUE prototype. The proposed heuristics can support any random-based search strategy or can be used stand-alone. It may be integrated seamlessly into most of the present query optimizers without almost any effort.},
	Affiliation = {Computer Science Department, DB Research Group, University of Rostock, D-18051 Rostock, Germany},
	Author = {Kr{\"o}ger, Joachim and Illner, Regina and Rost, Steffen and Heuer, Andreas},
	Booktitle = {Advances in Databases and Information Systems},
	Date-Added = {2012-06-19 15:24:26 +0200},
	Date-Modified = {2012-06-19 15:24:41 +0200},
	Editor = {Eder, Johann and Rozman, Ivan and Welzer, Tatjana},
	Isbn = {978-3-540-66485-7},
	Keyword = {Computer Science},
	Note = {10.1007/3-540-48252-0_22},
	Pages = {288-303},
	Publisher = {Springer Berlin / Heidelberg},
	Series = {Lecture Notes in Computer Science},
	Title = {Query Rewriting and Search in {CROQUE}},
	Url = {http://dx.doi.org/10.1007/3-540-48252-0_22},
	Volume = {1691},
	Year = {1999},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/3-540-48252-0_22}}

@incollection{Grust03,
	Author = {Torsten Grust},
	Booktitle = {The Functional Approach to Data Management - Modeling, Analyzing and Integrating Heterogeneous Data},
	Chapter = {1},
	Date-Added = {2012-06-17 02:08:23 +0200},
	Date-Modified = {2012-06-17 02:11:24 +0200},
	Editor = {P.M.D. Gray and L. Kerschberg and P.J.H. King and A. Poulovassilis},
	Isbn = {3-540-00375-4},
	Nomonth = {September},
	Pages = {1-24},
	Publisher = {Springer Verlag},
	Title = {Monad Comprehensions: A Versatile Representation for Queries},
	Year = {2003}}

@inproceedings{Grust07a,
	Acmid = {1247642},
	Author = {Grust, Torsten and Mayr, Manuel and Rittinger, Jan and Sakr, Sherif and Teubner, Jens},
	Booktitle = {Proceedings of the 2007 ACM SIGMOD international conference on Management of data},
	Date-Added = {2012-06-15 02:30:44 +0200},
	Date-Modified = {2012-06-15 02:31:13 +0200},
	Doi = {10.1145/1247480.1247642},
	Isbn = {978-1-59593-686-8},
	Keywords = {SQL, XQuery, relational algebra, relational databases},
	Location = {Beijing, China},
	Noaddress = {New York, NY, USA},
	Numpages = {3},
	Pages = {1162--1164},
	Publisher = acm,
	Series = {SIGMOD '07},
	Title = {A {SQL}:1999 code generator for the {Pathfinder} {XQuery} compiler},
	Url = {http://doi.acm.org/10.1145/1247480.1247642},
	Year = {2007},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1247480.1247642},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1247480.1247642}}

@inproceedings{Grust07,
	Acmid = {1247591},
	Author = {Grust, Torsten and Rittinger, Jan and Teubner, Jens},
	Booktitle = {Proceedings of the 2007 ACM SIGMOD international conference on Management of data},
	Date-Added = {2012-06-15 02:29:28 +0200},
	Date-Modified = {2012-06-15 02:29:32 +0200},
	Doi = {10.1145/1247480.1247591},
	Isbn = {978-1-59593-686-8},
	Keywords = {SQL, XPath, partitioned B-tree, relational databases},
	Location = {Beijing, China},
	Noaddress = {New York, NY, USA},
	Numpages = {10},
	Pages = {949--958},
	Publisher = acm,
	Series = {SIGMOD '07},
	Title = {Why off-the-shelf RDBMSs are better at XPath than you might expect},
	Url = {http://doi.acm.org/10.1145/1247480.1247591},
	Year = {2007},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1247480.1247591},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1247480.1247591}}

@article{Grust12DeepRuby,
	Author = {Grust, T. and Mayr, M.},
	Date-Added = {2012-06-15 02:27:44 +0200},
	Date-Modified = {2012-06-17 02:26:03 +0200},
	Journal = {ICDE Conference},
	Title = {A deep embedding of queries into {Ruby}},
	Year = {2012}}

@incollection{Grust97QueryEvalCROQUE,
	Abstract = {With the substantial change of declarative query languages from plain SQL to the so-called ``object SQLs'', in particular OQL, there has surprisingly been not much change in the way problems of query representation and optimization for such languages are tackled. We identify some of the difficulties pure algebraic approaches experience when facing object models and the operations defined for them. Calculus-style formalisms suite this challenge better, but are said not to be efficiently implementable in the database context.},
	Affiliation = {University of Konstanz Database Research Group P.O. Box D188 D-78457 Konstanz Germany P.O. Box D188 D-78457 Konstanz Germany},
	Author = {Grust, Torsten and Kr{\"o}ger, Joachim and Gluche, Dieter and Heuer, Andreas and Scholl, Marc},
	Booktitle = {Advances in Databases},
	Date-Added = {2012-06-15 00:43:22 +0200},
	Date-Modified = {2012-07-09 15:22:39 +0200},
	Keyword = {Computer Science},
	Noeditor = {Small, Carol and Douglas, Paul and Johnson, Roger and King, Peter and Martin, Nigel},
	Noisbn = {978-3-540-63263-4},
	Nonote = {10.1007/3-540-63263-8\_6},
	Nourl = {http://dx.doi.org/10.1007/3-540-63263-8_6},
	Pages = {84-100},
	Publisher = {Springer Berlin / Heidelberg},
	Series = lncs,
	Title = {Query evaluation in {CROQUE} --- Calculus and Algebra Coincide},
	Volume = {1271},
	Year = {1997},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/3-540-63263-8_6}}

@article{Grust99How,
	Abstract = {Compilers and optimizers for declarative query languages use some form of intermediate language to represent user-level queries. The advent of compositional query languages for orthogonal type systems (e.g., OQL) calls for internal query representations beyond extensions of relational algebra. This work adopts a view of query processing which is greatly influenced by ideas from the functional programming domain. A uniform formal framework is presented which covers all query translation phases, including user-level query language compilation, query optimization, and execution plan generation. We pursue the type-based design---based on initial algebras---of a core functional language which is then developed into an intermediate representation that fits the needs of advanced query processing. Based on the principle of structural recursion we extend the language by monad comprehensions (which provide us with a calculus-style sublanguage that proves to be useful during the optimization of nested queries) and combinators (abstractions of the query operators implemented by the underlying target query engine). Due to its functional nature, the language is susceptible to program transformation techniques that were developed by the functional programming as well as the functional data model communities. We show how database query processing can substantially benefit from these techniques.},
	Author = {Grust, Torsten and Scholl, Marc H.},
	Date-Added = {2012-06-15 00:35:41 +0200},
	Date-Modified = {2012-07-09 15:24:22 +0200},
	Issue = {2},
	Journal = {Journal of Intelligent Information Systems},
	Keyword = {Computer Science},
	Noissn = {0925-9902},
	Nonote = {10.1023/A:1008705026446},
	Nourl = {http://dx.doi.org/10.1023/A:1008705026446},
	Pages = {191-218},
	Publisher = {Springer Netherlands},
	Title = {How to Comprehend Queries Functionally},
	Volume = {12},
	Year = {1999},
	Bdsk-Url-1 = {http://dx.doi.org/10.1023/A:1008705026446}}

@inproceedings{Grust96Monoid,
	Annote = {Superseded by Grust96Translating},
	Author = {Grust, T. and Scholl, M.H.},
	Booktitle = {Workshop on Performance Enhancement in Object Bases, Schloss Dagstuhl},
	Date-Added = {2012-06-15 00:27:47 +0200},
	Date-Modified = {2012-06-15 00:34:39 +0200},
	Doi = {10.1.1.36.4925, 10.1.1.36.4481(abstract)},
	Organization = {Citeseer},
	Title = {Monoid Comprehensions as a Target for the Translation of OQL},
	Year = {1996},
	Bdsk-Url-1 = {http://dx.doi.org/10.1.1.36.4925,%2010.1.1.36.4481(abstract)}}

@inproceedings{Abiteboul98,
	Abstract = {Semistructured data is not strictly typed like relational or object-oriented data and may be irregular or incomplete. It often arises in practice, e.g., when heterogeneous data sources are integrated or data is taken from the World Wide Web.  Views over semistructured data can be used to filter the data and to restructure (or provide structure to) it.  To achieve fast query response time, these views are often materialized.  This paper studies incremental maintenance techniques for materialized views over semistructured data.  We use the graph-based data model OEM and the query language Lorel, developed at Stanford, as the framework for our work. We propose a new algorithm that produces a set of queries that compute the changes to the view based upon a change to the source.  We develop an analytic cost model and compare the cost of executing our incremental maintenance algorithm to that of recomputing the view.  We show that for nearly all types of database updates, it is more efficient to apply our incremental maintenance algorithm to the view than to recompute the view from the database, even when there are thousands of such updates.},
	Author = {S. Abiteboul and J. McHugh and M. Rys and V. Vassalos and J. Wiener},
	Booktitle = {24rd International Conference on Very Large Data Bases (VLDB 1998)},
	Date-Added = {2012-06-01 00:25:00 +0200},
	Date-Modified = {2012-06-01 00:25:06 +0200},
	Keywords = {semistructured data, incremental view maintenance},
	Title = {Incremental Maintenance for Materialized Views over Semistructured Data},
	Url = {http://ilpubs.stanford.edu:8090/340/},
	Year = {1998},
	Bdsk-Url-1 = {http://ilpubs.stanford.edu:8090/340/}}

@phdthesis{Trinder89,
	Abstract = {A Functional Database Phil Trinder D.Phil. Thesis Wolfson College Michaelmas Term, 1989 This thesis explores the use of functional languages to implement, manipulate and query databases. Implementing databases. A functional language is used to construct a database manager that allows efficient and concurrent access to shared data. In contrast to the locking mechanism found in conventional databases, the functional database uses data dependency to provide exclusion. Results obtained from a prototype database demonstrate that data dependency permits an unusual degree of concurrency between operations on the data. The prototype database is used to exhibit some problems that seriously restrict concurrency and also to demonstrate the resolution of these problems using a new primitive. The design of a more realistic database is outlined. Some restrictions on the data structures that can be used in a functional database are also uncovered. Manipulating databases. Functions over the database a...},
	Author = {Phil Trinder},
	Date-Added = {2012-06-01 00:21:52 +0200},
	Date-Modified = {2012-06-01 00:24:01 +0200},
	Location = {http://www.scientificcommons.org/43048088},
	Nomonth = {December},
	School = {Oxford University},
	Title = {A Functional Database},
	Url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.52.4456},
	Url2 = {http://www.cs.ox.ac.uk/publications/publication3861-abstract.html},
	Year = {1989},
	Bdsk-Url-1 = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.52.4456}}

@inproceedings{atkinson1994object,
	Author = {Atkinson, M. and Dewitt, D. and Maier, D. and Bancilhon, F. and Dittrich, K. and Zdonik, S.},
	Booktitle = {Readings in database systems (2nd ed.)},
	Date-Added = {2012-04-19 15:25:00 +0200},
	Date-Modified = {2012-04-19 15:25:00 +0200},
	Organization = {Morgan Kaufmann Publishers Inc.},
	Pages = {946--954},
	Title = {The object-oriented database system manifesto},
	Year = {1994}}

@techreport{Grust96Translating,
	Author = {Grust, Torsten and Scholl, Marc H.},
	Date-Added = {2012-04-07 20:50:43 +0200},
	Date-Modified = {2012-04-11 15:03:12 +0200},
	Institution = {University of Konstanz, Department of Mathematics and Computer Science, Database Research Group},
	Month = {September},
	Number = {3a/1996},
	Title = {Translating {OQL} into Monoid Comprehensions: Stuck with Nested Loops?},
	Year = {1996}}

@incollection{GlucheGrust97Incr,
	Address = springeraddr,
	Affiliation = {University of Konstanz Department of Mathematics and Computer Science D-78457 Konstanz Germany D-78457 Konstanz Germany},
	Annote = {{"}Incremental updates for materialized {OQL} views{"}, from Gluche, *Grust*, Mainberger and *Scholl*, defines IVM for queries in the monoid comprehension framework.
However, they mostly ignore many hard problems. On list they just support addition at the sides.
Furthermore, they support deletions by extending non-idempotent monoids to groups, but they don't support deletion on idempotent monoids (e.g. sets); for instance they do not have multiplicity counts. They admit this and discuss workarounds or alternative approaches at the end of Sec. 6 of their paper.
},
	Author = {Gluche, Dieter and Grust, Torsten and Mainberger, Christof and Scholl, Marc},
	Booktitle = {Deductive and Object-Oriented Databases},
	Date-Added = {2012-04-05 19:07:37 +0200},
	Date-Modified = {2013-05-13 09:21:18 +0000},
	Keyword = {Computer Science},
	Keywords = {incremental view maintenance},
	Noeditor = {Bry, Fran{\c c}ois and Ramakrishnan, Raghu and Ramamohanarao, Kotagiri},
	Noisbn = {978-3-540-63792-9},
	Nonote = {10.1007/3-540-63792-3\_8},
	Nourl = {http://dx.doi.org/10.1007/3-540-63792-3_8},
	Pages = {52-66},
	Publisher = springerbase,
	Series = lncs,
	Title = {Incremental updates for materialized {OQL} views},
	Volume = {1341},
	Year = {1997},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/3-540-63792-3_8}}

@phdthesis{Grust99PhD,
	Author = {Torsten Grust},
	Bibsource = {DBLP, http://dblp.uni-trier.de},
	Date-Added = {2012-03-25 21:40:42 +0200},
	Date-Modified = {2012-03-30 21:40:30 +0200},
	Pages = {I-VIII, 1-161},
	School = {University of Konstanz},
	Title = {Comprehending queries},
	Year = {1999}}

@incollection{Willis06JQL,
	Abstract = {Modern programming languages have little or no support for querying objects and collections. Programmers are forced to hand code such queries using nested loops, which is both cumbersome and inefficient. We demonstrate that first-class queries over objects and collections improve program readability, provide good performance and are applicable to a large number of common programming problems. We have developed a prototype extension to Java which tracks all objects in a program using AspectJ and allows first-class queries over them in the program. Our experimental findings indicate that such queries can be significantly faster than common programming idioms and within reach of hand optimised queries.},
	Address = springeraddr,
	Author = {Willis, Darren and Pearce, David and Noble, James},
	Booktitle = ecoop,
	Date-Added = {2012-03-17 11:42:11 +0100},
	Date-Modified = {2012-04-11 15:15:26 +0200},
	Keyword = {Computer Science},
	Noaffiliation = {Computer Science, Victoria University of Wellington, NZ},
	Noeditor = {Thomas, Dave},
	Noisbn = {978-3-540-35726-1},
	Nonote = {10.1007/11785477_3},
	Noseries = lncs,
	Nourl = {http://dx.doi.org/10.1007/11785477_3},
	Novolume = {4067},
	Pages = {28-49},
	Publisher = springerbase,
	Title = {Efficient Object Querying for {Java}},
	Year = {2006},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/11785477_3}}

@article{Meijer11CoSQL,
	Acmid = {1924436},
	Author = {Meijer, Erik and Bierman, Gavin},
	Date-Added = {2012-03-16 17:13:46 +0100},
	Date-Modified = {2012-03-16 17:13:46 +0100},
	Issue_Date = {April 2011},
	Journal = {Commun. ACM},
	Noaddress = {New York, NY, USA},
	Nodoi = {10.1145/1924421.1924436},
	Noissn = {0001-0782},
	Nomonth = apr,
	Nourl = {http://doi.acm.org/10.1145/1924421.1924436},
	Number = {4},
	Numpages = {10},
	Pages = {49--58},
	Publisher = acm,
	Title = {A co-relational model of data for large shared data banks},
	Volume = {54},
	Year = {2011},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1924421.1924436},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1924421.1924436}}

@inproceedings{Ramalingam93,
	Acmid = {158710},
	Address = acmaddr,
	Author = {Ramalingam, G. and Reps, Thomas},
	Booktitle = popl,
	Date-Added = {2011-12-09 15:17:35 +0100},
	Date-Modified = {2013-05-13 09:21:34 +0000},
	Keywords = {incremental view maintenance},
	Nodoi = {http://doi.acm.org/10.1145/158511.158710},
	Noisbn = {0-89791-560-7},
	Nolocation = {Charleston, South Carolina, United States},
	Noseries = {POPL '93},
	Numpages = {9},
	Pages = {502--510},
	Publisher = acm,
	Title = {A categorized bibliography on incremental computation},
	Year = {1993},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/158511.158710}}

@inproceedings{Willis08,
	Acmid = {1449766},
	Author = {Willis, Darren and Pearce, David J. and Noble, James},
	Booktitle = oopsla,
	Date-Added = {2011-12-09 01:00:18 +0100},
	Date-Modified = {2013-05-13 09:19:18 +0000},
	Keywords = {incrementalization, java, querying; incremental view maintenance},
	Location = {Nashville, TN, USA},
	Noseries = {OOPSLA '08},
	Numpages = {18},
	Pages = {1--18},
	Publisher = acm,
	Title = {Caching and incrementalisation in the {Java Query Language}},
	Year = {2008},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1449764.1449766}}

@article{Colby90,
	Author = {Latha S. Colby},
	Date-Added = {2011-12-09 00:54:46 +0100},
	Date-Modified = {2011-12-09 01:22:59 +0100},
	Journal = {Information Systems},
	Nodoi = {10.1016/0306-4379(90)90029-O},
	Number = {5},
	Pages = {567--582},
	Publisher = {Elsevier},
	Title = {A recursive algebra for nested relations},
	Volume = {15},
	Year = {1990},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/030643799090029O},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/0306-4379(90)90029-O}}

@article{Fegaras00,
	Acmid = {377676},
	Author = {Fegaras, Leonidas and Maier, David},
	Date-Added = {2011-11-29 16:52:26 +0100},
	Date-Modified = {2011-12-09 00:37:58 +0100},
	Issue = {4},
	Journal = tods,
	Keywords = {nested relations, object-oriented databases, query decorrelation, query optimization},
	Noaddress = {New York, NY, USA},
	Nodoi = {http://doi.acm.org/10.1145/377674.377676},
	Noissn = {0362-5915},
	Nomonth = {December},
	Nourl = {http://doi.acm.org/10.1145/377674.377676},
	Numpages = {60},
	Pages = {457--516},
	Publisher = acm,
	Title = {Optimizing object queries using an effective calculus},
	Volume = {25},
	Year = {2000},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/377674.377676}}

@techreport{Henglein09,
	Author = {Henglein, Fritz},
	Date-Added = {2011-11-28 12:25:11 +0100},
	Date-Modified = {2011-12-09 00:37:58 +0100},
	Institution = {Department of Computer Science, University of Copenhagen (DIKU)},
	Keywords = {discrimination},
	Nomonth = {October},
	Nourl = {http://www.diku.dk/hjemmesider/ansatte/henglein/bib/publications/henglein2009c.html},
	Number = {608},
	Read = {1},
	Title = {Generic Top-down Discrimination},
	Year = {2009},
	Bdsk-Url-1 = {http://www.diku.dk/hjemmesider/ansatte/henglein/bib/publications/henglein2009c.html}}

@inproceedings{Henglein10,
	Author = {Henglein, Fritz and Larsen, Ken Friis},
	Booktitle = wgp,
	Date-Added = {2011-11-28 12:18:11 +0100},
	Date-Modified = {2011-12-09 01:22:35 +0100},
	Keywords = {algebra, bag, discrimination, equivalence, filter, gadt, generic, haskell, join, lazy, linq, map, multiset, ordering, programming, project, query, querying, relational, select, sql, symbolic},
	Nourl = {http://doi.acm.org/10.1145/1863495.1863503},
	Numpages = {12},
	Pages = {49--60},
	Publisher = acm,
	Series = {WGP '10},
	Title = {Generic multiset programming for language-integrated querying},
	Year = {2010},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1863495.1863503}}

@inproceedings{Henglein08,
	Acmid = {1411220},
	Author = {Henglein, Fritz},
	Booktitle = icfp,
	Date-Added = {2011-11-28 12:15:07 +0100},
	Date-Modified = {2011-12-09 00:37:58 +0100},
	Keywords = {discrimination, discriminator, equivalence, functional, generic, multiset discrimination, order, partitioning, sorting, total preorder},
	Location = {Victoria, BC, Canada},
	Noaddress = {New York, NY, USA},
	Nodoi = {http://doi.acm.org/10.1145/1411204.1411220},
	Noisbn = {978-1-59593-919-7},
	Nourl = {http://doi.acm.org/10.1145/1411204.1411220},
	Numpages = {12},
	Pages = {91--102},
	Publisher = acm,
	Series = {ICFP '08},
	Title = {Generic discrimination: sorting and partitioning unshared data in linear time},
	Year = {2008},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1411204.1411220}}

@inproceedings{Copeland84,
	Abstract = {To overcome limitations in the modeling power of existing database systems and provide a better tool for database application programming, Servio Logic Corporation is developing a computer system to support a set-theoretic data model in an object-oriented programming environment. We recount the problems with existing models and database systems. We then show how features of Smalltalk, such such as operational semantics, its type hierarchy, entity identity and the merging of programming and data language, solve many of those problems. Next we consider what Smalltalk lacks as a database system secondary storage management, a declarative semantics, concurrency, past states. To address these shortcomings, we needed a formal data model. We introduce the GemStone data model, and show how it helps to define path expressions, a declarative semantics and object history in the OPAL language. We summarize similar approaches, and give a brief overview of the GemStone system implementation.},
	Acmid = {602300},
	Author = {Copeland, George and Maier, David},
	Booktitle = sigmod,
	Date-Added = {2011-11-27 19:25:54 +0100},
	Date-Modified = {2011-12-09 00:37:58 +0100},
	Location = {Boston, Massachusetts},
	Noaddress = {New York, NY, USA},
	Nodoi = {http://doi.acm.org/10.1145/602259.602300},
	Noisbn = {0-89791-128-8},
	Nourl = {http://doi.acm.org/10.1145/602259.602300},
	Numpages = {10},
	Pages = {316--325},
	Publisher = acm,
	Series = {SIGMOD '84},
	Title = {Making Smalltalk a database system},
	Year = {1984},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8Qhy4uLy4uLy4uLy4uL0Ryb3Bib3gvUGFwZXJzL1Byb2dyYW1taW5nIExhbmd1YWdlcy9RdWVyeSBsYW5ndWFnZXMvRGF0YWJhc2UgcGFwZXJzL01ha2luZyBTbWFsbHRhbGsgYSBkYXRhYmFzZSBzeXN0ZW0gLSBwMzE2LWNvcGVsYW5kLnBkZtIXCxgZV05TLmRhdGFPEQKgAAAAAAKgAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADOl7nTSCsAAAAWLTofTWFraW5nIFNtYWxsdGFsayBhIGQjMTYyRDQ0LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYtRMr5M74AAAAAAAAAAAAEAAYAAAkgAAAAAAAAAAAAAAAAAAAAD0RhdGFiYXNlIHBhcGVycwAAEAAIAADOl6vDAAAAEQAIAADK+SWuAAAAAQAcABYtOgAWLTIAFieIABYmewAWIfsADZefAAJkjgACAIlNYWNpbnRvc2ggSEQ6VXNlcnM6AHBnaWFycnVzc286AERyb3Bib3g6AFBhcGVyczoAUHJvZ3JhbW1pbmcgTGFuZ3VhZ2VzOgBRdWVyeSBsYW5ndWFnZXM6AERhdGFiYXNlIHBhcGVyczoATWFraW5nIFNtYWxsdGFsayBhIGQjMTYyRDQ0LnBkZgAADgBuADYATQBhAGsAaQBuAGcAIABTAG0AYQBsAGwAdABhAGwAawAgAGEAIABkAGEAdABhAGIAYQBzAGUAIABzAHkAcwB0AGUAbQAgAC0AIABwADMAMQA2AC0AYwBvAHAAZQBsAGEAbgBkAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgCMVXNlcnMvcGdpYXJydXNzby9Ecm9wYm94L1BhcGVycy9Qcm9ncmFtbWluZyBMYW5ndWFnZXMvUXVlcnkgbGFuZ3VhZ2VzL0RhdGFiYXNlIHBhcGVycy9NYWtpbmcgU21hbGx0YWxrIGEgZGF0YWJhc2Ugc3lzdGVtIC0gcDMxNi1jb3BlbGFuZC5wZGYAEwABLwAAFQACABH//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgEYAR0BJQPJA8sD0APbA+QD8gP2A/0EBgQLBBgEGwQtBDAENQAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAQ3},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/602259.602300}}

@inproceedings{Henglein10a,
	Acmid = {1706372},
	Author = {Henglein, Fritz},
	Booktitle = pepm,
	Date-Modified = {2011-12-09 00:37:58 +0100},
	Keywords = {algebra, cross-product, discrimination, discriminator, equivalence, evaluation, formal, generic, join, lazy, optimization, optimize, optimizing, product, query, relational, symbolic},
	Location = {Madrid, Spain},
	Noaddress = {New York, NY, USA},
	Nodoi = {http://doi.acm.org/10.1145/1706356.1706372},
	Noisbn = {978-1-60558-727-1},
	Nourl = {http://doi.acm.org/10.1145/1706356.1706372},
	Numpages = {10},
	Pages = {73--82},
	Publisher = acm,
	Series = {PEPM '10},
	Title = {Optimizing relational algebra operations using generic equivalence discriminators and lazy products},
	Year = {2010},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1706356.1706372}}

@article{Lee98,
	Acmid = {627917},
	Author = {Lee, Wang-Chien and Lee, Dik Lun},
	Date-Modified = {2011-12-09 00:37:58 +0100},
	Issue = {3},
	Journal = kde,
	Keywords = {Object-oriented database, aggregation hierarchy, index method, file structure, nested query},
	Noaddress = {Piscataway, NJ, USA},
	Nodoi = {10.1109/69.687974},
	Noissn = {1041-4347},
	Nomonth = {May},
	Nourl = {http://dl.acm.org/citation.cfm?id=627316.627917},
	Numpages = {18},
	Pages = {371--388},
	Publisher = {IEEE Educational Activities Department},
	Title = {Path Dictionary: A New Access Method for Query Processing in Object-Oriented Databases},
	Volume = {10},
	Year = {1998},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=627316.627917},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/69.687974}}

@article{Bertino89,
	Author = {Bertino, E. and Kim, W.},
	Date-Modified = {2011-12-09 00:37:58 +0100},
	Journal = kde,
	Keywords = {index organizations, indexing, indexing techniques, information retrieval, nested objects, nested relational database, object-oriented database, queries, query evaluation, reference sharing, relational databases, retrieval cost, storage cost, update cost},
	Number = {2},
	Pages = {196--214},
	Publisher = {IEEE},
	Title = {Indexing techniques for queries on nested objects},
	Volume = {1},
	Year = {1989}}

@incollection{Gupta99MMV,
	Acmid = {310737},
	Author = {Gupta, Ashish and Mumick, Inderpal Singh},
	Booktitle = {Materialized views},
	Date-Modified = {2013-10-02 14:30:02 +0000},
	Editor = {Gupta, Ashish and Mumick, Iderpal Singh},
	Keywords = {incremental view maintenance},
	Noaddress = {Cambridge, MA, USA},
	Noisbn = {0-262-57122-6},
	Nourl = {http://dl.acm.org/citation.cfm?id=310709.310737},
	Numpages = {13},
	Pages = {145--157},
	Publisher = {MIT Press},
	Title = {Maintenance of materialized views: problems, techniques, and applications},
	Year = {1999}}

@inproceedings{Koch10IQE,
	Acmid = {1807100},
	Address = acmaddr,
	Author = {Koch, Christoph},
	Booktitle = pods,
	Keywords = {algebra, incremental view maintenance},
	Location = {Indianapolis, Indiana, USA},
	Nodoi = {10.1145/1807085.1807100},
	Noisbn = {978-1-4503-0033-9},
	Noseries = {PODS '10},
	Nourl = {http://doi.acm.org/10.1145/1807085.1807100},
	Numpages = {12},
	Pages = {87--98},
	Publisher = ACM,
	Title = {Incremental Query Evaluation in a Ring of Databases},
	Year = {2010}}

@comment{BibDesk Static Groups{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>group name</key>
		<string>Database</string>
		<key>keys</key>
		<string>Fegaras00,Henglein10,Lee98,Henglein09,Henglein10a,Henglein08,Copeland84,Bertino89</string>
	</dict>
</array>
</plist>
}}
